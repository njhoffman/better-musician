'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.injectReducer = exports.makeRootReducer = exports.orm = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _redux = require('redux');

var _location = require('./location');

var _location2 = _interopRequireDefault(_location);

var _modal = require('./modal');

var _modal2 = _interopRequireDefault(_modal);

var _drawerMenu = require('./drawerMenu');

var _drawerMenu2 = _interopRequireDefault(_drawerMenu);

var _reduxForm = require('redux-form');

var _auth = require('./auth');

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _reduxOrm = require('redux-orm');

var _baseModels = require('./baseModels');

var _baseModels2 = _interopRequireDefault(_baseModels);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// selectors need access to ORM
// TODO: put orm in own module
var orm = exports.orm = new _reduxOrm.ORM(); // import { combineReducers } from 'redux-immutablejs';

orm.register.apply(orm, (0, _toConsumableArray3.default)(_baseModels2.default));
var ormReducer = (0, _reduxOrm.createReducer)(orm);

var makeRootReducer = exports.makeRootReducer = function makeRootReducer(asyncReducers) {
  var injectedModels = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];


  if (injectedModels.length > 0) {
    orm.register.apply(orm, (0, _toConsumableArray3.default)(injectedModels));
  }

  return (0, _redux.combineReducers)((0, _extends3.default)({
    orm: ormReducer,
    location: _location2.default,
    form: _reduxForm.reducer,
    modal: _modal2.default,
    drawerMenu: _drawerMenu2.default,
    // auth reducer is immutable js so must be mapped in containers correctly
    auth: _auth.authStateReducer
  }, asyncReducers));
};

var injectReducer = exports.injectReducer = function injectReducer(store, _ref) {
  var key = _ref.key,
      reducer = _ref.reducer,
      models = _ref.models;

  if (Object.hasOwnProperty.call(store.asyncReducers, key)) {
    return;
  }

  store.asyncReducers[key] = reducer;
  store.replaceReducer(makeRootReducer(store.asyncReducers, models));
};

exports.default = makeRootReducer;
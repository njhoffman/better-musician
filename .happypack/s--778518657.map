{"version":3,"sources":["src/store/auth/utils/client-settings.js"],"names":["applyConfig","C","root","Function","eval","defaultSettings","proxyIf","proxyUrl","forceHardRedirect","storage","cookieExpiry","cookiePath","initialCredentials","passwordResetSuccessUrl","location","href","confirmationSuccessUrl","tokenFormat","client","expiry","uid","parseExpiry","headers","parseInt","handleLoginResponse","resp","data","handleAccountUpdateResponse","handleTokenValidationResponse","dispatch","endpoint","settings","reset","currentEndpointKey","resetConfig","defaultEndpointKey","currentEndpoint","savedCreds","SAVED_CREDS_KEY","user","resolve","tokenValidationPath","then","response","status","json","reject","reason"],"mappings":"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","file":"client-settings.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import * as C from \"./constants\";\nimport extend from \"extend\";\nimport fetch from \"./fetch\";\nimport parseEndpointConfig from \"./parse-endpoint-config\";\nimport {setEndpointKeys} from \"../actions/configure\";\nimport {\n  getApiUrl,\n  getCurrentSettings,\n  setCurrentSettings,\n  getInitialEndpointKey,\n  setDefaultEndpointKey,\n  setCurrentEndpoint,\n  setCurrentEndpointKey,\n  removeData,\n  retrieveData,\n  persistData\n} from \"./session-storage\";\n\n// can't use \"window\" with node app\nvar root = Function(\"return this\")() || (42, eval)(\"this\");\n\nconst defaultSettings = {\n  proxyIf:            function() { return false; },\n  proxyUrl:           \"/proxy\",\n  forceHardRedirect:  false,\n  storage:            \"cookies\",\n  cookieExpiry:       14,\n  cookiePath:         \"/\",\n  initialCredentials: null,\n\n  passwordResetSuccessUrl: function() {\n    return root.location.href;\n  },\n\n  confirmationSuccessUrl:  function() {\n    return root.location.href;\n  },\n\n  tokenFormat: {\n    \"access-token\": \"{{ access-token }}\",\n    \"token-type\":   \"Bearer\",\n    client:         \"{{ client }}\",\n    expiry:         \"{{ expiry }}\",\n    uid:            \"{{ uid }}\"\n  },\n\n  parseExpiry: function(headers){\n    // convert from ruby time (seconds) to js time (millis)\n    return (parseInt(headers[\"expiry\"], 10) * 1000) || null;\n  },\n\n  handleLoginResponse: function(resp) {\n    return resp.data;\n  },\n\n  handleAccountUpdateResponse: function(resp) {\n    return resp.data;\n  },\n\n  handleTokenValidationResponse: function(resp) {\n    return resp.data;\n  }\n};\n\n// save session configuration\nexport function applyConfig({dispatch, endpoint={}, settings={}, reset=false}={}) {\n  let currentEndpointKey;\n\n  if (reset) {\n    resetConfig();\n  }\n\n  if (settings.initialCredentials) {\n    currentEndpointKey = settings.initialCredentials.currentEndpointKey;\n  }\n\n  setCurrentSettings(extend({}, defaultSettings, settings));\n\n  let {defaultEndpointKey, currentEndpoint} = parseEndpointConfig(\n    endpoint, getInitialEndpointKey()\n  );\n\n  if (!currentEndpointKey) {\n    currentEndpointKey = defaultEndpointKey;\n  }\n\n  // persist default config key with session storage\n  setDefaultEndpointKey(defaultEndpointKey);\n  setCurrentEndpoint(currentEndpoint);\n\n  dispatch(setEndpointKeys(Object.keys(currentEndpoint), currentEndpointKey, defaultEndpointKey));\n  setCurrentEndpointKey(currentEndpointKey);\n\n  let savedCreds = retrieveData(C.SAVED_CREDS_KEY);\n\n\n  if (getCurrentSettings().initialCredentials) {\n    // skip initial headers check (i.e. check was already done server-side)\n    let {user, headers} = getCurrentSettings().initialCredentials;\n    persistData(C.SAVED_CREDS_KEY, headers);\n    return Promise.resolve(user);\n  } else if (savedCreds) {\n    // verify session credentials with API\n    return fetch(`${getApiUrl(currentEndpointKey)}${currentEndpoint[currentEndpointKey].tokenValidationPath}`)\n    .then(response => {\n          if (response.status >= 200 && response.status < 300) {\n            return response.json().then(({ data }) => (data));\n          }\n          removeData(C.SAVED_CREDS_KEY);\n          return Promise.reject({reason: \"No credentials.\"});\n    });\n  } else {\n    return Promise.reject({reason: \"No credentials.\"})\n  }\n}\n"]}
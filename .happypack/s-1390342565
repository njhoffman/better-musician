'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVisibleSongs = exports.getCurrentSong = exports.isOpen = exports.actions = exports.fetchSongs = exports.SONGS_FAILURE = exports.SONGS_SUCCESS = exports.SONGS_REQUEST = exports.songsSuccess = exports.addSong = exports.setSort = exports.setCurrentSong = exports.hideModal = exports.FETCH_SONGS = exports.SET_SORT = exports.HIDE_MODAL = exports.SET_CURRENT_SONG = exports.INIT_SONG_VIEW = undefined;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _ACTION_HANDLERS;

exports.default = songsReducer;

var _selectors = require('routes/Songs/modules/selectors');

var _api = require('middleware/api');

var _model = require('./model');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INIT_SONG_VIEW = exports.INIT_SONG_VIEW = 'INIT_SONG_VIEW';
var SET_CURRENT_SONG = exports.SET_CURRENT_SONG = 'SET_CURRENT_SONG';
var HIDE_MODAL = exports.HIDE_MODAL = 'HIDE_MODAL';
var SET_SORT = exports.SET_SORT = 'SET_SORT';
var FETCH_SONGS = exports.FETCH_SONGS = 'FETCH_SONGS';

// ------------------------------------
// Action Creators
// ------------------------------------

var hideModal = exports.hideModal = function hideModal() {
  return function (dispatch, getState) {
    return dispatch({ type: HIDE_MODAL });
  };
};

var setCurrentSong = exports.setCurrentSong = function setCurrentSong(rowNumber, columnNumber, e) {
  return function (dispatch, getState) {
    // use onCellClick to access event handler to grab correct song id
    // TODO: make pull request for onRowSelect to return custom id instead of autogenerated rowNumber
    var currentSong = e.currentTarget.attributes['data-rowid'].value;
    return dispatch({ type: SET_CURRENT_SONG, payload: currentSong });
  };
};

var setSort = exports.setSort = function setSort(sortField) {
  return function (dispatch, getState) {
    return dispatch({ type: SET_SORT, payload: sortField });
  };
};

var nextAvailableId = function nextAvailableId(songCollection) {
  return songCollection.map(function (song) {
    return song.id;
  }).sort(function (a, b) {
    return a - b;
  }).pop() + 1;
};

var addSong = exports.addSong = function addSong(values) {
  return function (dispatch, getState) {
    var fieldValues = getState().form.addSongForm.values;
    var availableId = nextAvailableId(getState().songs.collection);
    return dispatch({ type: 'ADD_SONG', payload: (0, _extends3.default)({}, fieldValues, { id: availableId }) });
  };
};

var songsSuccess = exports.songsSuccess = function songsSuccess(response) {
  return function (dispatch) {
    var tables = response.tables;
    dispatch({ type: SONGS_SUCCESS, payload: response });
    dispatch({ type: 'LOAD_ARTISTS', payload: tables.artists });
    dispatch({ type: 'LOAD_INSTRUMENTS', payload: tables.instruments });
    dispatch({ type: 'LOAD_GENRES', payload: tables.genres });
    dispatch({ type: 'LOAD_SONGS', payload: tables.songs });
  };
};

var SONGS_REQUEST = exports.SONGS_REQUEST = 'SONGS_REQUEST';
var SONGS_SUCCESS = exports.SONGS_SUCCESS = 'SONGS_SUCCESS';
var SONGS_FAILURE = exports.SONGS_FAILURE = 'SONGS_FAILURE';

// Fetches a page of starred repos by a particular user.
var fetchSongs = exports.fetchSongs = function fetchSongs() {
  var nextPageUrl = '/songs';
  return function (dispatch) {
    return dispatch((0, _defineProperty3.default)({}, _api.CALL_API, {
      types: [SONGS_REQUEST, songsSuccess, SONGS_FAILURE],
      endpoint: nextPageUrl
    }));
  };
};

var actions = exports.actions = {
  addSong: addSong, hideModal: hideModal, setCurrentSong: setCurrentSong, fetchSongs: fetchSongs
};

// ------------------------------------
// Property Mappers
// ------------------------------------

var isOpen = exports.isOpen = function isOpen(modal) {
  return modal.modalType === 'ADD_SONG';
};

var getCurrentSong = exports.getCurrentSong = function getCurrentSong(state) {
  return (0, _selectors.currentSong)(state);
};

var getVisibleSongs = exports.getVisibleSongs = function getVisibleSongs(state) {
  return (0, _selectors.songs)(state);
};

// ------------------------------------
// Action Handlers
// ------------------------------------

var songsSuccess2 = function songsSuccess2(state, action) {

  // load dependent tables first
  var sng = _model.Song;
  var art = _model.Artist;
  var tables = action.response.tables;
  tables.artists.forEach(function (artist) {
    _model.Artist.create(artist);
  });
  tables.genres.forEach(function (genre) {
    _model.Genre.create(genre);
  });
  tables.instruments.forEach(function (instrument) {
    _model.Instrument.create(instrument);
  });
  tables.songs.forEach(function (song) {
    _model.Song.create(song);
  });
  debugger;
  return state;
};

var ACTION_HANDLERS = (_ACTION_HANDLERS = {}, (0, _defineProperty3.default)(_ACTION_HANDLERS, INIT_SONG_VIEW, function (state, action) {
  return (0, _extends3.default)({}, state, { initialized: true });
}), (0, _defineProperty3.default)(_ACTION_HANDLERS, SET_CURRENT_SONG, function (state, action) {
  return (0, _extends3.default)({}, state, { currentSong: action.payload });
}), (0, _defineProperty3.default)(_ACTION_HANDLERS, SONGS_REQUEST, function (state, action) {
  return (0, _extends3.default)({}, state, { fetching: true });
}), (0, _defineProperty3.default)(_ACTION_HANDLERS, SONGS_SUCCESS, function (state, action) {
  return (0, _extends3.default)({}, state, { fetching: false });
}), (0, _defineProperty3.default)(_ACTION_HANDLERS, SET_SORT, function (state, action) {
  return (0, _extends3.default)({}, state, { sortField: action.payload });
}), _ACTION_HANDLERS);

// ------------------------------------
// Reducer
// ------------------------------------


var initialState = {
  fetching: false,
  currentGenres: [],
  currentInstruments: [],
  initialized: false,
  currentFilters: [],
  sortField: ''
};

function songsReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments[1];

  var handler = ACTION_HANDLERS[action.type];

  return handler ? handler(state, action) : state;
}
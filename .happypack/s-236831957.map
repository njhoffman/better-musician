{"version":3,"sources":["src/store/auth/utils/parse-url.js"],"names":["normalizeTokenKeys","getAllParams","getRedirectInfo","params","token","auth_token","client_id","client","config","endpointKey","getAnchorSearch","location","rawAnchor","anchor","arr","split","length","getSearchQs","rawQs","search","qs","replace","qsObj","parse","getAnchorQs","anchorQs","anchorQsObj","stripKeys","obj","keys","q","buildCredentials","authHeaders","key","getLocationWithoutParams","currentLocation","newSearch","stringify","newAnchorQs","newAnchor","hash","match","newLocation","pathname","authKeys","authRedirectHeaders","authRedirectPath"],"mappings":"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","file":"parse-url.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import querystring from \"querystring\";\r\nimport extend from \"extend\";\r\n\r\nexport function normalizeTokenKeys (params) {\r\n  // normalize keys\r\n  if (params.token) {\r\n    params[\"access-token\"] = params.token;\r\n    delete params.token;\r\n  }\r\n  if (params.auth_token) {\r\n    params[\"access-token\"] = params.auth_token;\r\n    delete params.auth_token;\r\n  }\r\n  if (params.client_id) {\r\n    params.client = params.client_id;\r\n    delete params.client_id;\r\n  }\r\n  if (params.config) {\r\n    params.endpointKey = params.config;\r\n    delete params.config;\r\n  }\r\n\r\n  return params;\r\n};\r\n\r\n\r\nconst getAnchorSearch = function(location) {\r\n  var rawAnchor = location.anchor || \"\",\r\n      arr       = rawAnchor.split(\"?\");\r\n  return (arr.length > 1) ? arr[1] : null;\r\n};\r\n\r\n\r\nconst getSearchQs = function(location) {\r\n  var rawQs = location.search || \"\",\r\n      qs    = rawQs.replace(\"?\", \"\"),\r\n      qsObj = (qs) ? querystring.parse(qs) : {};\r\n\r\n  return qsObj;\r\n};\r\n\r\n\r\nconst getAnchorQs = function(location) {\r\n  var anchorQs    = getAnchorSearch(location),\r\n      anchorQsObj = (anchorQs) ? querystring.parse(anchorQs) : {};\r\n\r\n  return anchorQsObj;\r\n};\r\n\r\nconst stripKeys = function(obj, keys) {\r\n  for (var q in keys) {\r\n    delete obj[keys[q]];\r\n  }\r\n\r\n  return obj;\r\n};\r\n\r\nexport function getAllParams (location) {\r\n  return extend({}, getAnchorQs(location), getSearchQs(location));\r\n};\r\n\r\n\r\nconst buildCredentials = function(location, keys) {\r\n  var params = getAllParams(location);\r\n  var authHeaders = {};\r\n\r\n  for (var key of keys) {\r\n    authHeaders[key] = params[key];\r\n  }\r\n\r\n  return normalizeTokenKeys(authHeaders);\r\n};\r\n\r\n\r\n// this method is tricky. we want to reconstruct the current URL with the\r\n// following conditions:\r\n// 1. search contains none of the supplied keys\r\n// 2. anchor search (i.e. `#/?key=val`) contains none of the supplied keys\r\n// 3. all of the keys NOT supplied are presevered in their original form\r\n// 4. url protocol, host, and path are preserved\r\nconst getLocationWithoutParams = function(currentLocation, keys) {\r\n  // strip all values from both actual and anchor search params\r\n  var newSearch   = querystring.stringify(stripKeys(getSearchQs(currentLocation), keys)),\r\n      newAnchorQs = querystring.stringify(stripKeys(getAnchorQs(currentLocation), keys)),\r\n      newAnchor   = (currentLocation.hash || \"\").split(\"?\")[0];\r\n\r\n  if (newSearch) {\r\n    newSearch = \"?\" + newSearch;\r\n  }\r\n\r\n  if (newAnchorQs) {\r\n    newAnchor += \"?\" + newAnchorQs;\r\n  }\r\n\r\n  if (newAnchor && !newAnchor.match(/^#/)) {\r\n    newAnchor = \"#/\" + newAnchor;\r\n  }\r\n\r\n  // reconstruct location with stripped auth keys\r\n  var newLocation = currentLocation.pathname + newSearch + newAnchor;\r\n\r\n  return newLocation;\r\n};\r\n\r\n\r\nexport default function getRedirectInfo(currentLocation) {\r\n  if (!currentLocation) {\r\n    return {};\r\n  } else {\r\n    let authKeys = [\r\n      \"access-token\",\r\n      \"token\",\r\n      \"auth_token\",\r\n      \"config\",\r\n      \"client\",\r\n      \"client_id\",\r\n      \"expiry\",\r\n      \"uid\",\r\n      \"reset_password\",\r\n      \"account_confirmation_success\"\r\n    ];\r\n\r\n    var authRedirectHeaders = buildCredentials(currentLocation, authKeys);\r\n    var authRedirectPath = getLocationWithoutParams(currentLocation, authKeys);\r\n\r\n    if (authRedirectPath !== currentLocation) {\r\n      return {authRedirectHeaders, authRedirectPath};\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n}\r\n"]}
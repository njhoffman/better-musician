{"version":3,"sources":["src/routes/Songs/modules/selectors.js"],"names":["ormSelector","state","orm","songSelector","session","songsView","sortField","modelObj","Song","all","toModelArray","sort","a","b","artist","fullName","songs","currentSongSelector","currentSong","count","withId","artistSelector","Artist","artists"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAGO,IAAMA,oCAAc,SAAdA,WAAc;AAAA,SAASC,MAAMC,GAAf;AAAA,CAApB;;AAEP,IAAMC,eAAe,6CAAuB,UAACC,OAAD,EAAUH,KAAV,EAAoB;AAC9D,MAAMI,YAAYJ,QAAQA,MAAMI,SAAd,GAA0B,KAA5C;AACA,MAAMC,YAAYD,YAAYA,UAAUC,SAAtB,GAAkC,OAApD;AACA,MAAMC,WAAWH,QAAQI,IAAR,GACbJ,QAAQI,IAAR,CAAaC,GAAb,GAAmBC,YAAnB,EADa,GAEb,EAFJ;AAGA,MAAIJ,SAAJ,EAAe;AACb,WAAOC,SAASI,IAAT,CAAe,UAACC,CAAD,EAAGC,CAAH,EAAS;AAC7B,UAAIP,cAAc,QAAlB,EAA4B;AAC1B,eAAOM,EAAEE,MAAF,CAASC,QAAT,GAAoBF,EAAEC,MAAF,CAASC,QAApC;AACD,OAFD,MAEO;AACL,eAAQH,EAAEN,SAAF,IAAeO,EAAEP,SAAF,CAAvB;AACD;AACF,KANM,CAAP;AAOD,GARD,MAQO;AACL,WAAOC,QAAP;AACD;AACF,CAjBoB,CAArB;;AAmBO,IAAMS,wBAAQ,8BACnBhB,WADmB,EAEnB;AAAA,SAASC,KAAT;AAAA,CAFmB,EAGnBE,YAHmB,CAAd;;AAMP,IAAMc,sBAAsB,6CAAuB,UAACb,OAAD,EAAUH,KAAV,EAAoB;AACrE,SAAOA,MAAMI,SAAN,IAAmB,OAAOJ,MAAMI,SAAN,CAAgBa,WAAvB,KAAuC,WAA1D,IAAyEd,QAAQI,IAAR,CAAaW,KAAb,KAAuB,CAAhG,GACHf,QAAQI,IAAR,CAAaY,MAAb,CAAoBnB,MAAMI,SAAN,CAAgBa,WAApC,CADG,GAEH,IAFJ;AAGD,CAJ2B,CAA5B;;AAMO,IAAMA,oCAAc,8BACzBlB,WADyB,EAEzB;AAAA,SAASC,KAAT;AAAA,CAFyB,EAGzBgB,mBAHyB,CAApB;;AAOP,IAAMI,iBAAiB,6CAAuB,mBAAW;AACvD,MAAMd,WAAWH,QAAQkB,MAAR,GAAgBlB,QAAQkB,MAAR,CAAeb,GAAf,GAAqBC,YAArB,EAAhB,GAAsD,EAAvE;AACA,SAAOH,QAAP;AACD,CAHsB,CAAvB;;AAKO,IAAMgB,4BAAU,8BACrBvB,WADqB,EAErB;AAAA,SAASC,KAAT;AAAA,CAFqB,EAGrBoB,cAHqB,CAAhB","file":"selectors.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import { orm } from 'store/reducers';\nimport { createSelector as ormCreateSelector } from 'redux-orm';\nimport { createSelector } from 'reselect';\n\n\nexport const ormSelector = state => state.orm;\n\nconst songSelector = ormCreateSelector(orm, (session, state) => {\n  const songsView = state ? state.songsView : false;\n  const sortField = songsView ? songsView.sortField : 'title';\n  const modelObj = session.Song\n    ? session.Song.all().toModelArray()\n    : [];\n  if (sortField) {\n    return modelObj.sort( (a,b) => {\n      if (sortField === 'artist') {\n        return a.artist.fullName > b.artist.fullName;\n      } else {\n        return (a[sortField] > b[sortField]);\n      }\n    });\n  } else {\n    return modelObj;\n  }\n});\n\nexport const songs = createSelector(\n  ormSelector,\n  state => state,\n  songSelector\n);\n\nconst currentSongSelector = ormCreateSelector(orm, (session, state) => {\n  return state.songsView && typeof state.songsView.currentSong !== 'undefined' && session.Song.count() > 0\n    ? session.Song.withId(state.songsView.currentSong)\n    : null;\n});\n\nexport const currentSong = createSelector(\n  ormSelector,\n  state => state,\n  currentSongSelector\n);\n\n\nconst artistSelector = ormCreateSelector(orm, session => {\n  const modelObj = session.Artist? session.Artist.all().toModelArray() : [];\n  return modelObj;\n});\n\nexport const artists = createSelector(\n  ormSelector,\n  state => state,\n  artistSelector\n);\n"]}
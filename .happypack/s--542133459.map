{"version":3,"sources":["src/store/auth/reducers/user.js"],"names":["authActions","ssActions","initialState","fromJS","attributes","isSignedIn","firstTimeLogin","mustResetPassword","endpointKey","AUTHENTICATE_COMPLETE","state","user","merge","SS_TOKEN_VALIDATION_COMPLETE","currentEndpointKey","set","endpoint","data","uid","SS_AUTH_TOKEN_UPDATE","AUTHENTICATE_FAILURE","SS_TOKEN_VALIDATION_ERROR"],"mappings":"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","file":"user.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import Immutable from \"immutable\";\r\nimport { createReducer } from \"redux-immutablejs\";\r\nimport { getCurrentEndpointKey } from \"../utils/session-storage.js\"\r\nimport * as authActions from \"../actions/authenticate\";\r\nimport { EMAIL_SIGN_IN_COMPLETE } from \"../actions/email-sign-in\";\r\nimport { EMAIL_SIGN_UP_COMPLETE } from \"../actions/email-sign-up\";\r\nimport { SIGN_OUT_COMPLETE, SIGN_OUT_ERROR } from \"../actions/sign-out\";\r\nimport { OAUTH_SIGN_IN_COMPLETE } from \"../actions/oauth-sign-in\";\r\nimport { DESTROY_ACCOUNT_COMPLETE } from \"../actions/destroy-account\";\r\nimport * as ssActions from \"../actions/server\";\r\nimport { STORE_CURRENT_ENDPOINT_KEY, SET_ENDPOINT_KEYS } from \"../actions/configure\";\r\n\r\nconst initialState = Immutable.fromJS({\r\n  attributes: null,\r\n  isSignedIn: false,\r\n  firstTimeLogin: false,\r\n  mustResetPassword: false,\r\n  endpointKey: null\r\n});\r\n\r\nexport default createReducer(initialState, {\r\n  [authActions.AUTHENTICATE_COMPLETE]: (state, { user }) => state.merge({\r\n    attributes: user,\r\n    isSignedIn: true,\r\n    endpointKey: getCurrentEndpointKey()\r\n  }),\r\n\r\n  [ssActions.SS_TOKEN_VALIDATION_COMPLETE]: (state, { user, mustResetPassword, firstTimeLogin }) => {\r\n    return state.merge({\r\n      attributes: user,\r\n      isSignedIn: true,\r\n      firstTimeLogin,\r\n      mustResetPassword\r\n    });\r\n  },\r\n\r\n  [STORE_CURRENT_ENDPOINT_KEY]: (state, {currentEndpointKey}) => state.set(\"endpointKey\", currentEndpointKey),\r\n  [SET_ENDPOINT_KEYS]: (state, {currentEndpointKey}) => state.set(\"endpointKey\", currentEndpointKey),\r\n\r\n  [EMAIL_SIGN_IN_COMPLETE]: (state, { endpoint, user }) => state.merge({\r\n    attributes: user.data,\r\n    isSignedIn: true,\r\n    endpointKey: endpoint\r\n  }),\r\n\r\n  [EMAIL_SIGN_UP_COMPLETE]: (state, { endpoint, user }) => {\r\n    // if registration does not require confirmation, user will be signed in at\r\n    // this point.\r\n    return (user.uid)\r\n      ? state.merge({\r\n        attributes: user,\r\n        isSignedIn: true,\r\n        endpointKey: endpoint\r\n      })\r\n      : state;\r\n  },\r\n\r\n  [OAUTH_SIGN_IN_COMPLETE]: (state, { endpoint, user }) => state.merge({\r\n    attributes: user,\r\n    isSignedIn: true,\r\n    endpointKey: endpoint\r\n  }),\r\n\r\n  [ssActions.SS_AUTH_TOKEN_UPDATE]: (state, {user, mustResetPassword, firstTimeLogin}) => {\r\n    return state.merge({\r\n      mustResetPassword,\r\n      firstTimeLogin,\r\n      isSignedIn: !!user,\r\n      attributes: user\r\n    });\r\n  },\r\n\r\n  [authActions.AUTHENTICATE_FAILURE]:    state => state.merge(initialState),\r\n  [ssActions.SS_TOKEN_VALIDATION_ERROR]: state => state.merge(initialState),\r\n  [SIGN_OUT_COMPLETE]:                   state => state.merge(initialState),\r\n  [SIGN_OUT_ERROR]:                      state => state.merge(initialState),\r\n  [DESTROY_ACCOUNT_COMPLETE]:            state => state.merge(initialState)\r\n});\r\n"]}
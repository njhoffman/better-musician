{"version":3,"sources":["src/redux-orm/Model.js"],"names":["getByIdQuery","modelInstance","modelClass","getClass","table","modelName","clauses","type","payload","idAttribute","getId","Model","props","_initFields","_fields","ThisModel","fieldValue","fieldName","get","set","value","configurable","enumerable","constructor","className","fieldNames","fields","map","field","ids","toModelArray","model","join","val","otherModel","propertyName","update","userMergeObj","relFields","mergeObj","mergeKey","hasOwnProperty","currentIds","toRefArray","row","normalizedNewIds","diffActions","idsToDelete","delete","idsToAdd","add","length","remove","session","applyUpdate","action","query","ref","_onDelete","virtualFields","key","clear","relatedQs","exists","relatedName","Error","ModelClass","_findDatabaseRows","options","markAccessed","_session","QuerySetClass","querySetClass","isSetUp","undefined","getQuerySet","userProps","m2mVals","declaredFieldNames","forEach","valuePassed","getDefault","newEntry","instance","uniqueIds","idsString","id","rows","lookupObj","getDataForModel","db","describe"],"mappings":"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","file":"Model.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import forOwn from 'lodash/forOwn';\nimport isArray from 'lodash/isArray';\nimport uniq from 'lodash/uniq';\n\nimport Session from './Session';\nimport QuerySet from './QuerySet';\nimport {\n    ManyToMany,\n    ForeignKey,\n    OneToOne,\n    attr,\n} from './fields';\nimport { CREATE, UPDATE, DELETE, FILTER } from './constants';\nimport {\n    normalizeEntity,\n    arrayDiffActions,\n    objectShallowEquals,\n} from './utils';\n\n\n// Generates a query specification\n// to get a single row from a table identified\n// by a primary key.\nfunction getByIdQuery(modelInstance) {\n    const modelClass = modelInstance.getClass();\n    return {\n        table: modelClass.modelName,\n        clauses: [\n            {\n                type: FILTER,\n                payload: {\n                    [modelClass.idAttribute]: modelInstance.getId(),\n                },\n            },\n        ],\n    };\n}\n\n\n/**\n * The heart of an ORM, the data model.\n *\n * The fields you specify to the Model will be used to generate\n * a schema to the database, related property accessors, and\n * possibly through models.\n *\n * In each {@link Session} you instantiate from an {@link ORM} instance,\n * you will receive a session-specific subclass of this Model. The methods\n * you define here will be available to you in sessions.\n *\n * An instance of {@link Model} represents a record in the database, though\n * it is possible to generate multiple instances from the same record in the database.\n *\n * To create data models in your schema, subclass {@link Model}. To define\n * information about the data model, override static class methods. Define instance\n * logic by defining prototype methods (without `static` keyword).\n */\nconst Model = class Model {\n    /**\n     * Creates a Model instance from it's properties.\n     * Don't use this to create a new record; Use the static method {@link Model#create}.\n     * @param  {Object} props - the properties to instantiate with\n     */\n    constructor(props) {\n        this._initFields(props);\n    }\n\n    _initFields(props) {\n        this._fields = Object.assign({}, props);\n\n        const ThisModel = this.getClass();\n\n        forOwn(props, (fieldValue, fieldName) => {\n            // In this case, we got a prop that wasn't defined as a field.\n            // Assuming it's an arbitrary data field, making an instance-specific\n            // descriptor for it.\n            // Using the in operator as the property could be defined anywhere\n            // on the prototype chain.\n            if (!(fieldName in this)) {\n                Object.defineProperty(this, fieldName, {\n                    get: () => this._fields[fieldName],\n                    set: value => this.set(fieldName, value),\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n    }\n\n    static toString() {\n        return `ModelClass: ${this.modelName}`;\n    }\n\n    /**\n     * Returns the options object passed to the database for the table that represents\n     * this Model class.\n     *\n     * Returns an empty object by default, which means the database\n     * will use default options. You can either override this function to return the options\n     * you want to use, or assign the options object as a static property of the same name to the\n     * Model class.\n     *\n     * @return {Object} the options object passed to the database for the table\n     *                  representing this Model class.\n     */\n    static options() {\n        return {};\n    }\n\n    static _getTableOpts() {\n        if (typeof this.options === 'function') {\n            return this.options();\n        }\n        return this.options;\n    }\n\n    static get _sessionData() {\n        if (!this.session) return {};\n        return this.session.getDataForModel(this.modelName);\n    }\n\n    static markAccessed() {\n        this.session.markAccessed(this);\n    }\n\n    /**\n     * Returns the id attribute of this {@link Model}.\n     *\n     * @return {string} The id attribute of this {@link Model}.\n     */\n    static get idAttribute() {\n        return this.session.db.describe(this.modelName).idAttribute;\n    }\n\n    /**\n     * Connect the model class to a {@link Session}.\n     *\n     * @private\n     * @param  {Session} session - The session to connect to.\n     */\n    static connect(session) {\n        if (!session instanceof Session) {\n            throw Error('A model can only connect to a Session instance.');\n        }\n        this._session = session;\n    }\n\n    /**\n     * Get the current {@link Session} instance.\n     *\n     * @private\n     * @return {Session} The current {@link Session} instance.\n     */\n    static get session() {\n        return this._session;\n    }\n\n    static getQuerySet() {\n        const QuerySetClass = this.querySetClass;\n        return new QuerySetClass(this);\n    }\n\n    static invalidateClassCache() {\n        this.isSetUp = undefined;\n        this.virtualFields = {};\n    }\n\n    static get query() {\n        return this.getQuerySet();\n    }\n\n    /**\n     * Returns a {@link QuerySet} containing all {@link Model} instances.\n     * @return {QuerySet} a QuerySet containing all {@link Model} instances\n     */\n    static all() {\n        return this.getQuerySet();\n    }\n\n    /**\n     * Creates a new record in the database, instantiates a {@link Model} and returns it.\n     *\n     * If you pass values for many-to-many fields, instances are created on the through\n     * model as well.\n     *\n     * @param  {props} props - the new {@link Model}'s properties.\n     * @return {Model} a new {@link Model} instance.\n     */\n    static create(userProps) {\n        const props = Object.assign({}, userProps);\n\n        const m2mVals = {};\n\n        const declaredFieldNames = Object.keys(this.fields);\n\n        declaredFieldNames.forEach(key => {\n            const field = this.fields[key];\n            const valuePassed = userProps.hasOwnProperty(key);\n            if (!valuePassed && !(field instanceof ManyToMany)) {\n                if (field.getDefault) {\n                    props[key] = field.getDefault();\n                }\n            } else {\n                const value = userProps[key];\n                props[key] = normalizeEntity(value);\n\n                // If a value is supplied for a ManyToMany field,\n                // discard them from props and save for later processing.\n                if (isArray(value)) {\n                    if (this.fields.hasOwnProperty(key) && this.fields[key] instanceof ManyToMany) {\n                        m2mVals[key] = value;\n                        delete props[key];\n                    }\n                }\n            }\n        });\n\n        const newEntry = this.session.applyUpdate({\n            action: CREATE,\n            table: this.modelName,\n            payload: props,\n        });\n\n        const ModelClass = this;\n        const instance = new ModelClass(newEntry);\n\n        forOwn(m2mVals, (value, key) => {\n            const ids = value.map(normalizeEntity);\n            const uniqueIds = uniq(ids);\n\n            if (ids.length !== uniqueIds.length) {\n                const idsString = ids;\n                throw new Error(`Found duplicate id(s) when passing \"${idsString}\" to ${this.modelName}.${key} value on create`);\n            }\n            instance[key].add(...ids);\n        });\n\n        return instance;\n    }\n\n    /**\n     * Returns a {@link Model} instance for the object with id `id`.\n     * This throws if the `id` doesn't exist. Use {@link Model#hasId}\n     * to check for existence first if you're not certain.\n     *\n     * @param  {*} id - the `id` of the object to get\n     * @throws If object with id `id` doesn't exist\n     * @return {Model} {@link Model} instance with id `id`\n     */\n    static withId(id) {\n        const ModelClass = this;\n        const rows = this._findDatabaseRows({ [ModelClass.idAttribute]: id });\n        if (rows.length === 0) {\n            throw new Error(`${ModelClass.modelName} instance with id ${id} not found`);\n        }\n\n        return new ModelClass(rows[0]);\n    }\n\n    /**\n     * Returns a boolean indicating if an entity with the id `id` exists\n     * in the state.\n     *\n     * @param  {*}  id - a value corresponding to the id attribute of the {@link Model} class.\n     * @return {Boolean} a boolean indicating if entity with `id` exists in the state\n     */\n    static hasId(id) {\n        const rows = this._findDatabaseRows({ [this.idAttribute]: id });\n        return rows.length === 1;\n    }\n\n    static _findDatabaseRows(lookupObj) {\n        const ModelClass = this;\n        return ModelClass\n            .session\n            .query({\n                table: ModelClass.modelName,\n                clauses: [\n                    {\n                        type: FILTER,\n                        payload: lookupObj,\n                    },\n                ],\n            }).rows;\n    }\n\n    /**\n     * Gets the {@link Model} instance that matches properties in `lookupObj`.\n     * Throws an error if {@link Model} is not found, or multiple records match\n     * the properties.\n     *\n     * @param  {Object} lookupObj - the properties used to match a single entity.\n     * @return {Model} a {@link Model} instance that matches `lookupObj` properties.\n     */\n    static get(lookupObj) {\n        const ModelClass = this;\n\n        const rows = this._findDatabaseRows(lookupObj);\n\n        if (rows.length === 0) {\n            throw new Error('Model instance not found when calling get method');\n        } else if (rows.length > 1) {\n            throw new Error(`Expected to find a single row in Model.get. Found ${rows.length}.`);\n        }\n\n        return new ModelClass(rows[0]);\n    }\n\n    /**\n     * Gets the {@link Model} class or subclass constructor (the class that\n     * instantiated this instance).\n     *\n     * @return {Model} The {@link Model} class or subclass constructor used to instantiate\n     *                 this instance.\n     */\n    getClass() {\n        return this.constructor;\n    }\n\n    /**\n     * Gets the id value of the current instance by looking up the id attribute.\n     * @return {*} The id value of the current instance.\n     */\n    getId() {\n        return this._fields[this.getClass().idAttribute];\n    }\n\n    /**\n     * Returns a reference to the plain JS object in the store.\n     * Make sure to not mutate this.\n     *\n     * @return {Object} a reference to the plain JS object in the store\n     */\n    get ref() {\n        const ModelClass = this.getClass();\n        return ModelClass._findDatabaseRows({\n            [ModelClass.idAttribute]: this.getId(),\n        })[0];\n    }\n\n    /**\n     * Returns a string representation of the {@link Model} instance.\n     *\n     * @return {string} A string representation of this {@link Model} instance.\n     */\n    toString() {\n        const ThisModel = this.getClass();\n        const className = ThisModel.modelName;\n        const fieldNames = Object.keys(ThisModel.fields);\n        const fields = fieldNames.map(fieldName => {\n            const field = ThisModel.fields[fieldName];\n            if (field instanceof ManyToMany) {\n                const ids = this[fieldName].toModelArray().map(\n                    model => model.getId()\n                );\n                return `${fieldName}: [${ids.join(', ')}]`;\n            }\n            const val = this._fields[fieldName];\n            return `${fieldName}: ${val}`;\n        }).join(', ');\n        return `${className}: {${fields}}`;\n    }\n\n    /**\n     * Returns a boolean indicating if `otherModel` equals this {@link Model} instance.\n     * Equality is determined by shallow comparing their attributes.\n     *\n     * @param  {Model} otherModel - a {@link Model} instance to compare\n     * @return {Boolean} a boolean indicating if the {@link Model} instance's are equal.\n     */\n    equals(otherModel) {\n        return objectShallowEquals(this._fields, otherModel._fields);\n    }\n\n    /**\n     * Updates a property name to given value for this {@link Model} instance.\n     * The values are immediately committed to the database.\n     *\n     * @param {string} propertyName - name of the property to set\n     * @param {*} value - value assigned to the property\n     * @return {undefined}\n     */\n    set(propertyName, value) {\n        this.update({ [propertyName]: value });\n    }\n\n    /**\n     * Assigns multiple fields and corresponding values to this {@link Model} instance.\n     * The updates are immediately committed to the database.\n     *\n     * @param  {Object} userMergeObj - an object that will be merged with this instance.\n     * @return {undefined}\n     */\n    update(userMergeObj) {\n        const ThisModel = this.getClass();\n        const relFields = ThisModel.fields;\n        const mergeObj = Object.assign({}, userMergeObj);\n\n        // If an array of entities or id's is supplied for a\n        // many-to-many related field, clear the old relations\n        // and add the new ones.\n        for (const mergeKey in mergeObj) { // eslint-disable-line no-restricted-syntax\n            if (relFields.hasOwnProperty(mergeKey)) {\n                const field = relFields[mergeKey];\n                if (field) {\n                    if (field instanceof ManyToMany) {\n                        const currentIds = this[mergeKey].toRefArray()\n                            .map(row => row[ThisModel.idAttribute]);\n\n                        const normalizedNewIds = mergeObj[mergeKey].map(normalizeEntity);\n                        const diffActions = arrayDiffActions(currentIds, normalizedNewIds);\n                        if (diffActions) {\n                            const idsToDelete = diffActions.delete;\n                            const idsToAdd = diffActions.add;\n                            if (idsToDelete.length > 0) {\n                                this[mergeKey].remove(...idsToDelete);\n                            }\n                            if (idsToAdd.length > 0) {\n                                this[mergeKey].add(...idsToAdd);\n                            }\n                        }\n                        delete mergeObj[mergeKey];\n                    } else if (field instanceof ForeignKey || field instanceof OneToOne) {\n                        mergeObj[mergeKey] = normalizeEntity(mergeObj[mergeKey]);\n                    }\n                }\n            }\n        }\n\n        this._initFields(Object.assign({}, this._fields, mergeObj));\n\n        ThisModel.session.applyUpdate({\n            action: UPDATE,\n            query: getByIdQuery(this),\n            payload: mergeObj,\n        });\n    }\n\n\n    /**\n     * Updates {@link Model} instance attributes to reflect the\n     * database state in the current session.\n     * @return {undefined}\n     */\n    refreshFromState() {\n        this._initFields(this.ref);\n    }\n\n    /**\n     * Deletes the record for this {@link Model} instance.\n     * You'll still be able to access fields and values on the instance.\n     *\n     * @return {undefined}\n     */\n    delete() {\n        this._onDelete();\n        this.getClass().session.applyUpdate({\n            action: DELETE,\n            query: getByIdQuery(this),\n        });\n    }\n\n    _onDelete() {\n        const virtualFields = this.getClass().virtualFields;\n        for (const key in virtualFields) { // eslint-disable-line\n            const field = virtualFields[key];\n            if (field instanceof ManyToMany) {\n                // Delete any many-to-many rows the entity is included in.\n                this[key].clear();\n            } else if (field instanceof ForeignKey) {\n                const relatedQs = this[key];\n                if (relatedQs.exists()) {\n                    relatedQs.update({ [field.relatedName]: null });\n                }\n            } else if (field instanceof OneToOne) {\n                // Set null to any foreign keys or one to ones pointed to\n                // this instance.\n                if (this[key] !== null) {\n                    this[key][field.relatedName] = null;\n                }\n            }\n        }\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    getNextState() {\n        throw new Error(\n            'Model.prototype.getNextState is removed. See the 0.9 ' +\n            'migration guide on the GitHub repo.'\n        );\n    }\n};\n\nModel.fields = {\n    id: attr(),\n};\nModel.virtualFields = {};\nModel.querySetClass = QuerySet;\n\nexport default Model;\n"]}
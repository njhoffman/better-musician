{"version":3,"sources":["src/routes/Songs/modules/songs.js"],"names":["songsReducer","INIT_SONG_VIEW","SET_CURRENT_SONG","HIDE_MODAL","SET_SORT","FETCH_SONGS","hideModal","dispatch","getState","type","setCurrentSong","rowNumber","columnNumber","e","currentSong","currentTarget","attributes","value","payload","setSort","sortField","nextAvailableId","songCollection","map","song","id","sort","a","b","pop","addSong","values","fieldValues","form","addSongForm","availableId","songs","collection","songsSuccess","response","tables","SONGS_SUCCESS","artists","instruments","genres","SONGS_REQUEST","SONGS_FAILURE","fetchSongs","nextPageUrl","types","endpoint","actions","isOpen","modal","modalType","getCurrentSong","state","getVisibleSongs","songsSuccess2","action","sng","art","forEach","create","artist","genre","instrument","ACTION_HANDLERS","initialized","fetching","initialState","currentGenres","currentInstruments","currentFilters","handler"],"mappings":"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","file":"songs.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import {\n  songs as songsSelector,\n  artists as artistsSelector ,\n  currentSong as currentSongSelector\n} from 'routes/Songs/modules/selectors';\n\n\nimport { CALL_API, Schemas } from 'middleware/api';\n\nexport const INIT_SONG_VIEW   = 'INIT_SONG_VIEW';\nexport const SET_CURRENT_SONG = 'SET_CURRENT_SONG';\nexport const HIDE_MODAL       = 'HIDE_MODAL';\nexport const SET_SORT = 'SET_SORT';\nexport const FETCH_SONGS = 'FETCH_SONGS';\n\n\n// ------------------------------------\n// Action Creators\n// ------------------------------------\n\nexport const hideModal = () => {\n  return (dispatch, getState) => {\n    return dispatch({ type: HIDE_MODAL });\n  };\n}\n\nexport const setCurrentSong = (rowNumber, columnNumber, e) => (dispatch, getState) => {\n  // use onCellClick to access event handler to grab correct song id\n  // TODO: make pull request for onRowSelect to return custom id instead of autogenerated rowNumber\n  const currentSong = e.currentTarget.attributes['data-rowid'].value;\n  return dispatch({ type: SET_CURRENT_SONG, payload: currentSong });\n};\n\nexport const setSort = (sortField) => (dispatch, getState) => {\n  return dispatch({ type: SET_SORT, payload: sortField });\n};\n\nconst nextAvailableId = (songCollection) =>\n  songCollection\n    .map( (song) => song.id )\n    .sort( (a, b) => a - b )\n    .pop() + 1;\n\nexport const addSong = (values) => (dispatch, getState) => {\n  const fieldValues = getState().form.addSongForm.values;\n  const availableId = nextAvailableId(getState().songs.collection);\n  return dispatch({ type: 'ADD_SONG', payload: { ...fieldValues, ...{ id: availableId }} });\n};\n\nexport const songsSuccess = (response) => {\n  return dispatch => {\n    const tables = response.tables;\n    dispatch({ type: SONGS_SUCCESS,      payload: response });\n    dispatch({ type: 'LOAD_ARTISTS',     payload: tables.artists });\n    dispatch({ type: 'LOAD_INSTRUMENTS', payload: tables.instruments });\n    dispatch({ type: 'LOAD_GENRES',      payload: tables.genres });\n    dispatch({ type: 'LOAD_SONGS',       payload: tables.songs });\n  }\n};\n\nexport const SONGS_REQUEST = 'SONGS_REQUEST';\nexport const SONGS_SUCCESS = 'SONGS_SUCCESS';\nexport const SONGS_FAILURE = 'SONGS_FAILURE';\n\n// Fetches a page of starred repos by a particular user.\nexport const fetchSongs = () =>  {\n  const nextPageUrl = `/songs`;\n  return dispatch => {\n    return dispatch({\n      [CALL_API]: {\n        types: [ SONGS_REQUEST, songsSuccess, SONGS_FAILURE ],\n        endpoint: nextPageUrl\n      }\n    });\n  }\n}\n\n\nexport const actions = {\n  addSong, hideModal, setCurrentSong, fetchSongs\n};\n\n\n// ------------------------------------\n// Property Mappers\n// ------------------------------------\n\nexport const isOpen = (modal) => {\n  return (modal.modalType === 'ADD_SONG');\n};\n\nexport const getCurrentSong = (state) => {\n  return currentSongSelector(state);\n};\n\nexport const getVisibleSongs = (state) => {\n  return songsSelector(state);\n};\n\n// ------------------------------------\n// Action Handlers\n// ------------------------------------\n\nimport { Song, Artist, Instrument, Genre } from './model';\nconst songsSuccess2 = (state, action) => {\n\n  // load dependent tables first\n  const sng = Song;\n  const art = Artist;\n  const tables = action.response.tables;\n  tables.artists.forEach(artist => {\n    Artist.create(artist);\n  });\n  tables.genres.forEach(genre => {\n    Genre.create(genre);\n  });\n  tables.instruments.forEach(instrument => {\n    Instrument.create(instrument);\n  });\n  tables.songs.forEach(song => {\n    Song.create(song);\n  });\n  debugger;\n  return state;\n};\n\nconst ACTION_HANDLERS = {\n  [INIT_SONG_VIEW]: (state, action) => {\n    return ({ ...state, initialized: true });\n  },\n  [SET_CURRENT_SONG]: (state, action) =>\n    ({ ...state, currentSong: action.payload }),\n  [SONGS_REQUEST]: (state, action) =>\n    ({ ...state, fetching: true }),\n  [SONGS_SUCCESS]: (state, action) =>\n    ({ ...state, fetching: false}),\n  [SET_SORT]: (state, action) =>\n    ({ ...state, sortField: action.payload })\n\n};\n\n\n// ------------------------------------\n// Reducer\n// ------------------------------------\n\n\nconst initialState = {\n  fetching:           false,\n  currentGenres:      [],\n  currentInstruments: [],\n  initialized:        false,\n  currentFilters:     [],\n  sortField:          ''\n};\n\nexport default function songsReducer (state = initialState, action) {\n  const handler = ACTION_HANDLERS[action.type];\n\n  return handler ? handler(state, action) : state;\n}\n\n"]}
{"version":3,"sources":["src/redux-orm/redux.js"],"names":["defaultUpdater","createSelector","session","action","sessionBoundModels","forEach","modelClass","reducer","createReducer","orm","updater","state","getEmptyState","args","length"],"mappings":";;;;;;QAKgBA,c,GAAAA,c;QA2DAC,c,GAAAA,c;;AAhEhB;;AAEA;;AAGO,SAASD,cAAT,CAAwBE,OAAxB,EAAiCC,MAAjC,EAAyC;AAC5CD,YAAQE,kBAAR,CAA2BC,OAA3B,CAAmC,sBAAc;AAC7C,YAAI,OAAOC,WAAWC,OAAlB,KAA8B,UAAlC,EAA8C;AAC1C;AACAD,uBAAWC,OAAX,CAAmBJ,MAAnB,EAA2BG,UAA3B,EAAuCJ,OAAvC;AACH;AACJ,KALD;AAMH;;AAGM,IAAMM,wCAAgB,SAAhBA,aAAgB,CAACC,GAAD;AAAA,QAAMC,OAAN,uEAAgBV,cAAhB;AAAA,WACzB,UAACW,KAAD,EAAQR,MAAR,EAAmB;AACf,YAAMD,UAAUO,IAAIP,OAAJ,CAAYS,SAASF,IAAIG,aAAJ,EAArB,CAAhB;AACAF,gBAAQR,OAAR,EAAiBC,MAAjB;AACA,eAAOD,QAAQS,KAAf;AACH,KALwB;AAAA,CAAtB;;AAQP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCO,SAASV,cAAT,CAAwBQ,GAAxB,EAAsC;AAAA,sCAANI,IAAM;AAANA,YAAM;AAAA;;AACzC,QAAIA,KAAKC,MAAL,KAAgB,CAApB,EAAuB;AACnB,eAAO,sBAAQD,KAAK,CAAL,CAAR,oBAA0BJ,GAA1B,CAAP;AACH;;AAED,WAAO,yEAAwCA,GAAxC,mBAAgDI,IAAhD,CAAP;AACH","file":"redux.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import { createSelectorCreator } from 'reselect';\n\nimport { memoize, eqCheck } from './memoize';\n\n\nexport function defaultUpdater(session, action) {\n    session.sessionBoundModels.forEach(modelClass => {\n        if (typeof modelClass.reducer === 'function') {\n            // This calls this.applyUpdate to update this.state\n            modelClass.reducer(action, modelClass, session);\n        }\n    });\n}\n\n\nexport const createReducer = (orm, updater = defaultUpdater) =>\n    (state, action) => {\n        const session = orm.session(state || orm.getEmptyState());\n        updater(session, action);\n        return session.state;\n    };\n\n\n/**\n * Returns a memoized selector based on passed arguments.\n * This is similar to `reselect`'s `createSelector`,\n * except you can also pass a single function to be memoized.\n *\n * If you pass multiple functions, the format will be the\n * same as in `reselect`. The last argument is the selector\n * function and the previous are input selectors.\n *\n * When you use this method to create a selector, the returned selector\n * expects the whole `redux-orm` state branch as input. In the selector\n * function that you pass as the last argument, you will receive\n * `session` argument (a `Session` instance) followed by any\n * input arguments, like in `reselect`.\n *\n * This is an example selector:\n *\n * ```javascript\n * // orm is an instance of ORM\n * const bookSelector = createSelector(orm, session => {\n *     return session.Book.map(book => {\n *         return Object.assign({}, book.ref, {\n *             authors: book.authors.map(author => author.name),\n *             genres: book.genres.map(genre => genre.name),\n *         });\n *     });\n * });\n * ```\n *\n * redux-orm uses a special memoization function to avoid recomputations.\n * When a selector runs for the first time, it checks which Models' state\n * branches were accessed. On subsequent runs, the selector first checks\n * if those branches have changed -- if not, it just returns the previous\n * result. This way you can use the `PureRenderMixin` in your React\n * components for performance gains.\n *\n * @param {ORM} orm - the ORM instance\n * @param  {...Function} args - zero or more input selectors\n *                              and the selector function.\n * @return {Function} memoized selector\n */\nexport function createSelector(orm, ...args) {\n    if (args.length === 1) {\n        return memoize(args[0], eqCheck, orm);\n    }\n\n    return createSelectorCreator(memoize, eqCheck, orm)(...args);\n}\n"]}
{"version":3,"sources":["src/redux-orm/utils.js"],"names":["warnDeprecated","msg","logger","console","warn","bind","log","capitalize","string","charAt","toUpperCase","slice","m2mName","declarationModelName","fieldName","m2mFromFieldName","m2mToFieldName","otherModelName","reverseFieldName","modelName","toLowerCase","querySetDelegatorFactory","methodName","querySetDelegator","getQuerySet","querySetGetterDelegatorFactory","getterName","querySetGetterDelegator","qs","forEachSuperClass","subClass","func","currClass","Function","prototype","attachQuerySetMethods","modelClass","querySetClass","leftToDefine","sharedMethods","cls","i","length","defined","descriptor","get","value","splice","normalizeEntity","entity","getId","reverseFieldErrorMessage","toModelName","backwardsFieldName","join","objectShallowEquals","a","b","keysInA","keysInB","key","hasOwnProperty","arrayDiffActions","sourceArr","targetArr","itemsInBoth","deleteItems","addItems","delete","add","getBatchToken","ops","includes"],"mappings":"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","file":"utils.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import forOwn from 'lodash/forOwn';\nimport includes from 'lodash/includes';\nimport ops from 'immutable-ops';\nimport intersection from 'lodash/intersection';\nimport difference from 'lodash/difference';\n\n\nfunction warnDeprecated(msg) {\n    const logger = typeof console.warn === 'function'\n        ? console.warn.bind(console)\n        : console.log.bind(console);\n    return logger(msg);\n}\n\n/**\n * @module utils\n */\n\nfunction capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Returns the branch name for a many-to-many relation.\n * The name is the combination of the model name and the field name the relation\n * was declared. The field name's first letter is capitalized.\n *\n * Example: model `Author` has a many-to-many relation to the model `Book`, defined\n * in the `Author` field `books`. The many-to-many branch name will be `AuthorBooks`.\n *\n * @private\n * @param  {string} declarationModelName - the name of the model the many-to-many relation was declared on\n * @param  {string} fieldName            - the field name where the many-to-many relation was declared on\n * @return {string} The branch name for the many-to-many relation.\n */\nfunction m2mName(declarationModelName, fieldName) {\n    return declarationModelName + capitalize(fieldName);\n}\n\n/**\n * Returns the fieldname that saves a foreign key to the\n * model id where the many-to-many relation was declared.\n *\n * Example: `Author` => `fromAuthorId`\n *\n * @private\n * @param  {string} declarationModelName - the name of the model where the relation was declared\n * @return {string} the field name in the through model for `declarationModelName`'s foreign key.\n */\nfunction m2mFromFieldName(declarationModelName) {\n    return `from${declarationModelName}Id`;\n}\n\n/**\n * Returns the fieldname that saves a foreign key in a many-to-many through model to the\n * model where the many-to-many relation was declared.\n *\n * Example: `Book` => `toBookId`\n *\n * @private\n * @param  {string} otherModelName - the name of the model that was the target of the many-to-many\n *                                   declaration.\n * @return {string} the field name in the through model for `otherModelName`'s foreign key..\n */\nfunction m2mToFieldName(otherModelName) {\n    return `to${otherModelName}Id`;\n}\n\nfunction reverseFieldName(modelName) {\n    return modelName.toLowerCase() + 'Set';\n}\n\nfunction querySetDelegatorFactory(methodName) {\n    return function querySetDelegator(...args) {\n        return this.getQuerySet()[methodName](...args);\n    };\n}\n\nfunction querySetGetterDelegatorFactory(getterName) {\n    return function querySetGetterDelegator() {\n        const qs = this.getQuerySet();\n        return qs[getterName];\n    };\n}\n\nfunction forEachSuperClass(subClass, func) {\n    let currClass = subClass;\n    while (currClass !== Function.prototype) {\n        func(currClass);\n        currClass = Object.getPrototypeOf(currClass);\n    }\n}\n\nfunction attachQuerySetMethods(modelClass, querySetClass) {\n    const leftToDefine = querySetClass.sharedMethods.slice();\n\n    // There is no way to get a property descriptor for the whole prototype chain;\n    // only from an objects own properties. Therefore we traverse the whole prototype\n    // chain for querySet.\n    forEachSuperClass(querySetClass, (cls) => {\n        for (let i = 0; i < leftToDefine.length; i++) {\n            let defined = false;\n            const methodName = leftToDefine[i];\n            const descriptor = Object.getOwnPropertyDescriptor(cls.prototype, methodName);\n            if (typeof descriptor !== 'undefined') {\n                if (typeof descriptor.get !== 'undefined') {\n                    descriptor.get = querySetGetterDelegatorFactory(methodName);\n                    Object.defineProperty(modelClass, methodName, descriptor);\n                    defined = true;\n                } else if (typeof descriptor.value === 'function') {\n                    modelClass[methodName] = querySetDelegatorFactory(methodName);\n                    defined = true;\n                }\n            }\n            if (defined) {\n                leftToDefine.splice(i--, 1);\n            }\n        }\n    });\n}\n\n/**\n * Normalizes `entity` to an id, where `entity` can be an id\n * or a Model instance.\n *\n * @private\n * @param  {*} entity - either a Model instance or an id value\n * @return {*} the id value of `entity`\n */\nfunction normalizeEntity(entity) {\n    if (entity !== null &&\n            typeof entity !== 'undefined' &&\n            typeof entity.getId === 'function') {\n        return entity.getId();\n    }\n    return entity;\n}\n\nfunction reverseFieldErrorMessage(modelName, fieldName, toModelName, backwardsFieldName) {\n    return [`Reverse field ${backwardsFieldName} already defined`,\n           ` on model ${toModelName}. To fix, set a custom related`,\n           ` name on ${modelName}.${fieldName}.`].join('');\n}\n\nfunction objectShallowEquals(a, b) {\n    let keysInA = 0;\n    let keysInB = 0;\n\n    forOwn(a, (value, key) => {\n        if (!b.hasOwnProperty(key) || b[key] !== value) {\n            return false;\n        }\n        keysInA++;\n    });\n\n    for (const key in b) {\n        if (b.hasOwnProperty(key)) keysInB++;\n    }\n\n    return keysInA === keysInB;\n}\n\nfunction arrayDiffActions(sourceArr, targetArr) {\n    const itemsInBoth = intersection(sourceArr, targetArr);\n    const deleteItems = difference(sourceArr, itemsInBoth);\n    const addItems = difference(targetArr, itemsInBoth);\n\n    if (deleteItems.length || addItems.length) {\n        return {\n            delete: deleteItems,\n            add: addItems,\n        };\n    }\n    return null;\n}\n\nconst { getBatchToken } = ops;\n\nexport {\n    attachQuerySetMethods,\n    m2mName,\n    m2mFromFieldName,\n    m2mToFieldName,\n    reverseFieldName,\n    normalizeEntity,\n    reverseFieldErrorMessage,\n    objectShallowEquals,\n    ops,\n    includes,\n    arrayDiffActions,\n    getBatchToken,\n    warnDeprecated,\n};\n"]}
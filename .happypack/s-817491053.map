{"version":3,"sources":["src/routes/Register/components/ButtonLoader.js"],"names":["Colors","ev","preventDefault","props","onClick","disabled","spinColorDisabled","primary","secondary","spinColorLight","spinColorDark","icon","color","getColor","loading","position","top","left","spinConfig","width","height","backgroundColor","children","className","disabledBackgroundColor","disabledLabelColor","fullWidth","href","label","paddingLeft","labelColor","labelPosition","labelStyle","rippleStyle","style","type","handleClick","bind","renderIcon","Component","propTypes","any","bool","object","string","node","func","isRequired","defaultProps","lines","length","radius","darkBlack","darkWhite","minBlack","ButtonLoader"],"mappings":"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","file":"ButtonLoader.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import React, { PropTypes } from \"react\";\nimport RaisedButton from \"material-ui/RaisedButton\";\nimport ActionFavorite from \"material-ui/svg-icons/action/favorite\";\nimport * as Colors from \"material-ui/styles/colors\";\nimport Spinner from \"react-loader\";\n\nclass ButtonLoader extends React.Component {\n  static propTypes = {\n    icon: PropTypes.any,\n    loading: PropTypes.bool,\n    spinConfig: PropTypes.object,\n    spinColorDark: PropTypes.string,\n    spinColorLight: PropTypes.string,\n    spinColorDisabled: PropTypes.string,\n    children: PropTypes.node,\n    onClick: PropTypes.func.isRequired,\n    style: PropTypes.object\n  };\n\n  static defaultProps = {\n    icon: ActionFavorite,\n    loading: false,\n    spinConfig: {\n      lines: 10,\n      length: 4,\n      width: 2,\n      radius: 3,\n    },\n    spinColorDark: Colors.darkBlack,\n    spinColorLight: Colors.darkWhite,\n    spinColorDisabled: Colors.minBlack,\n    children: <span>Submit</span>,\n    style: {}\n  };\n\n  handleClick (ev) {\n    ev.preventDefault();\n    this.props.onClick(ev);\n  }\n\n  getColor () {\n    if (this.props.disabled) {\n      return this.props.spinColorDisabled;\n    } else if (this.props.primary || this.props.secondary) {\n      return this.props.spinColorLight;\n    } else {\n      return this.props.spinColorDark;\n    }\n  }\n\n  renderIcon () {\n    let icon,\n        color = this.getColor();\n\n    if (this.props.loading) {\n      icon = (\n        <div style={{position: \"absolute\", top: 15, left: 7}}>\n          <Spinner\n            ref=\"spinner\"\n            {...this.props.spinConfig}\n            color={color}\n            loaded={false} />\n        </div>\n      );\n    } else {\n      if (typeof(this.props.icon) === \"object\") {\n        icon = this.props.icon;\n      } else {\n        icon = <this.props.icon color={color} style={{width: 15, height: 15}} />;\n      }\n    }\n\n    return (\n      <span style={{\n        width: 15,\n        height: 15,\n        position: \"absolute\",\n        left: 10,\n        top: 3\n      }}>\n        {icon}\n      </span>\n    );\n  }\n\n  render () {\n    let color = this.getColor();\n\n    const props = {\n      backgroundColor: this.props.backgroundColor,\n      children: this.props.children,\n      className: this.props.className,\n      disabled: this.props.disabled || this.props.loading,\n      disabledBackgroundColor: this.props.disabledBackgroundColor,\n      disabledLabelColor: this.props.disabledLabelColor,\n      fullWidth: this.props.fullWidth,\n      href: this.props.href,\n      label: this.props.label || <span style={{paddingLeft: 15, color}}>{this.props.children}</span>,\n      labelColor: this.props.labelColor || color,\n      labelPosition: this.props.labelPosition || \"after\",\n      labelStyle: this.props.labelStyle,\n      primary: this.props.primary,\n      rippleStyle: this.props.rippleStyle,\n      secondary: this.props.secondary,\n      style: this.props.style,\n      type: this.props.type\n    };\n\n   return (\n        <RaisedButton\n          {...props}\n          onClick={this.handleClick.bind(this)}>\n          {this.renderIcon()}\n        </RaisedButton>\n    );\n  }\n}\n\nexport default ButtonLoader;\n"]}
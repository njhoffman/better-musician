{"version":3,"sources":["src/redux-orm/db/Database.js"],"names":["createDatabase","replaceTableState","tableName","newTableState","tx","state","batchToken","withMutations","batch","set","query","tables","querySpec","table","clauses","rows","update","updateSpec","action","payload","nextTableState","resultPayload","currTableState","result","insert","created","delete","Error","nextDBState","status","schemaSpec","tablesSpec","tableSpec","getEmptyState","bind","describe"],"mappings":";;;;;QAmEgBA,c,GAAAA,c;;AAnEhB;;;;AACA;;;;AAEA;;AAEA;;;;;;AAGA,SAASC,iBAAT,CAA2BC,SAA3B,EAAsCC,aAAtC,EAAqDC,EAArD,EAAyDC,KAAzD,EAAgE;AAAA,QACpDC,UADoD,GACtBF,EADsB,CACpDE,UADoD;AAAA,QACxCC,aADwC,GACtBH,EADsB,CACxCG,aADwC;;;AAG5D,QAAIA,aAAJ,EAAmB;AACfF,cAAMH,SAAN,IAAmBC,aAAnB;AACA,eAAOE,KAAP;AACH;;AAED,WAAO,uBAAIG,KAAJ,CAAUC,GAAV,CAAcH,UAAd,EAA0BJ,SAA1B,EAAqCC,aAArC,EAAoDE,KAApD,CAAP;AACH;;AAED,SAASK,KAAT,CAAeC,MAAf,EAAuBC,SAAvB,EAAkCP,KAAlC,EAAyC;AAAA,QACtBH,SADsB,GACCU,SADD,CAC7BC,KAD6B;AAAA,QACXC,OADW,GACCF,SADD,CACXE,OADW;;AAErC,QAAMD,QAAQF,OAAOT,SAAP,CAAd;AACA,QAAMa,OAAOF,MAAMH,KAAN,CAAYL,MAAMH,SAAN,CAAZ,EAA8BY,OAA9B,CAAb;AACA,WAAO;AACHC;AADG,KAAP;AAGH;;AAED,SAASC,MAAT,CAAgBL,MAAhB,EAAwBM,UAAxB,EAAoCb,EAApC,EAAwCC,KAAxC,EAA+C;AAAA,QACnCa,MADmC,GACfD,UADe,CACnCC,MADmC;AAAA,QAC3BC,OAD2B,GACfF,UADe,CAC3BE,OAD2B;;;AAG3C,QAAIjB,kBAAJ;AACA,QAAIkB,uBAAJ;AACA,QAAIC,sBAAJ;;AAEA,QAAIH,4BAAJ,EAAuB;AACThB,iBADS,GACKe,UADL,CAChBJ,KADgB;;AAEnB,YAAMA,QAAQF,OAAOT,SAAP,CAAd;AACA,YAAMoB,iBAAiBjB,MAAMH,SAAN,CAAvB;AACA,YAAMqB,SAASV,MAAMW,MAAN,CAAapB,EAAb,EAAiBkB,cAAjB,EAAiCH,OAAjC,CAAf;AACAC,yBAAiBG,OAAOlB,KAAxB;AACAgB,wBAAgBE,OAAOE,OAAvB;AACH,KAPD,MAOO;AAAA,YACYb,SADZ,GAC0BK,UAD1B,CACKP,KADL;AAEOR,iBAFP,GAEqBU,SAFrB,CAEAC,KAFA;;AAAA,qBAGcH,MAAMC,MAAN,EAAcC,SAAd,EAAyBP,KAAzB,CAHd;AAAA,YAGKU,IAHL,UAGKA,IAHL;;AAKH,YAAMF,SAAQF,OAAOT,SAAP,CAAd;AACA,YAAMoB,kBAAiBjB,MAAMH,SAAN,CAAvB;;AAEA,YAAIgB,4BAAJ,EAAuB;AACnBE,6BAAiBP,OAAMG,MAAN,CAAaZ,EAAb,EAAiBkB,eAAjB,EAAiCP,IAAjC,EAAuCI,OAAvC,CAAjB;AACH,SAFD,MAEO,IAAID,4BAAJ,EAAuB;AAC1BE,6BAAiBP,OAAMa,MAAN,CAAatB,EAAb,EAAiBkB,eAAjB,EAAiCP,IAAjC,CAAjB;AACH,SAFM,MAEA;AACH,kBAAM,IAAIY,KAAJ,6CAAoDT,MAApD,CAAN;AACH;AACJ;;AAED,QAAMU,cAAc3B,kBAAkBC,SAAlB,EAA6BkB,cAA7B,EAA6ChB,EAA7C,EAAiDC,KAAjD,CAApB;AACA,WAAO;AACHwB,kCADG;AAEHxB,eAAOuB,WAFJ;AAGHT,iBAASE;AAHN,KAAP;AAKH;;AAEM,SAASrB,cAAT,CAAwB8B,UAAxB,EAAoC;AAAA,QACvBC,UADuB,GACRD,UADQ,CAC/BnB,MAD+B;;AAEvC,QAAMA,SAAS,yBAAUoB,UAAV,EAAsB;AAAA,eAAa,oBAAUC,SAAV,CAAb;AAAA,KAAtB,CAAf;;AAEA,QAAMC,gBAAgB,SAAhBA,aAAgB;AAAA,eAAM,yBAAUtB,MAAV,EAAkB;AAAA,mBAASE,MAAMoB,aAAN,EAAT;AAAA,SAAlB,CAAN;AAAA,KAAtB;AACA,WAAO;AACHA,oCADG;AAEHvB,eAAOA,MAAMwB,IAAN,CAAW,IAAX,EAAiBvB,MAAjB,CAFJ;AAGHK,gBAAQA,OAAOkB,IAAP,CAAY,IAAZ,EAAkBvB,MAAlB,CAHL;AAIH;AACAwB,kBAAU;AAAA,mBAAaxB,OAAOT,SAAP,CAAb;AAAA;AALP,KAAP;AAOH;;kBAGcF,c","file":"Database.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import mapValues from 'lodash/mapValues';\nimport ops from 'immutable-ops';\n\nimport { CREATE, UPDATE, DELETE, SUCCESS } from '../constants';\n\nimport Table from './Table';\n\n\nfunction replaceTableState(tableName, newTableState, tx, state) {\n    const { batchToken, withMutations } = tx;\n\n    if (withMutations) {\n        state[tableName] = newTableState;\n        return state;\n    }\n\n    return ops.batch.set(batchToken, tableName, newTableState, state);\n}\n\nfunction query(tables, querySpec, state) {\n    const { table: tableName, clauses } = querySpec;\n    const table = tables[tableName];\n    const rows = table.query(state[tableName], clauses);\n    return {\n        rows,\n    };\n}\n\nfunction update(tables, updateSpec, tx, state) {\n    const { action, payload } = updateSpec;\n\n    let tableName;\n    let nextTableState;\n    let resultPayload;\n\n    if (action === CREATE) {\n        ({ table: tableName } = updateSpec);\n        const table = tables[tableName];\n        const currTableState = state[tableName];\n        const result = table.insert(tx, currTableState, payload);\n        nextTableState = result.state;\n        resultPayload = result.created;\n    } else {\n        const { query: querySpec } = updateSpec;\n        ({ table: tableName } = querySpec);\n        const { rows } = query(tables, querySpec, state);\n\n        const table = tables[tableName];\n        const currTableState = state[tableName];\n\n        if (action === UPDATE) {\n            nextTableState = table.update(tx, currTableState, rows, payload);\n        } else if (action === DELETE) {\n            nextTableState = table.delete(tx, currTableState, rows);\n        } else {\n            throw new Error(`Database received unknown update type: ${action}`);\n        }\n    }\n\n    const nextDBState = replaceTableState(tableName, nextTableState, tx, state);\n    return {\n        status: SUCCESS,\n        state: nextDBState,\n        payload: resultPayload,\n    };\n}\n\nexport function createDatabase(schemaSpec) {\n    const { tables: tablesSpec } = schemaSpec;\n    const tables = mapValues(tablesSpec, tableSpec => new Table(tableSpec));\n\n    const getEmptyState = () => mapValues(tables, table => table.getEmptyState());\n    return {\n        getEmptyState,\n        query: query.bind(null, tables),\n        update: update.bind(null, tables),\n        // Used to inspect the schema.\n        describe: tableName => tables[tableName],\n    };\n}\n\n\nexport default createDatabase;\n"]}
{"version":3,"sources":["src/routes/Songs/components/Modal/AddSong.js"],"names":["dialogStyle","width","maxWidth","validate","values","errors","requiredFields","forEach","field","AddSongModal","props","dispatch","addSong","actions","hideModal","textColor","muiTheme","palette","isOpen","genres","map","genre","id","name","instruments","instrument","propTypes","PropTypes","func","array","bool","form"],"mappings":"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","file":"AddSong.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { RenderSelectField, RenderTextField, RenderSliderField } from 'components/Field';\nimport FlatButton from 'material-ui/FlatButton';\nimport Dialog from 'material-ui/Dialog';\nimport MenuItem from 'material-ui/MenuItem';\nimport muiThemeable from 'material-ui/styles/muiThemeable';\nimport css from './AddSong.scss';\n\nconst dialogStyle = {\n  width: \"300px\",\n  maxWidth: \"none\"\n};\n\nconst validate = (values) => {\n  const errors = {};\n  const requiredFields = [ 'title', 'artist', 'instrument', 'progress' ];\n  requiredFields.forEach(field => {\n    if (!values[ field ]) {\n      errors[ field ] = 'Required';\n    }\n  });\n  return errors;\n};\n\n\nexport const AddSongModal = (props) => {\n\n  const { dispatch, addSong } = props;\n\n  const actions = [\n    <FlatButton\n      label=\"Cancel\"\n      primary={true}\n      onTouchTap={ props.hideModal }\n    />,\n    <FlatButton\n      label=\"Add\"\n      primary={true}\n      keyboardFocused={true}\n      onTouchTap={ addSong }\n    />\n  ];\n  const textColor = props.muiTheme.palette.textColor;\n\n  return (\n    <Dialog\n      title=\"Add Song\"\n      modal={false}\n      actions={ actions }\n      open={ props.isOpen }\n      onRequestClose={ props.hideModal }\n      contentStyle={dialogStyle}>\n      <form onSubmit={props.addSong}>\n        <Field\n          name=\"title\"\n          component={RenderTextField}\n          label=\"Song Title\" />\n        <Field\n          name=\"artist\"\n          component={RenderTextField}\n          label=\"Song Artist\" />\n        <Field name=\"genre\" component={RenderSelectField} label=\"Song Genre\">\n          {props.genres && props.genres.map(genre =>\n            <MenuItem\n              key={genre.id}\n              value={genre.id}\n              primaryText={genre.name}\n            />\n          )}\n        </Field>\n        <Field name=\"instrument\" component={RenderSelectField} label=\"Instrument\">\n          {props.instruments && props.instruments.map(instrument =>\n            <MenuItem\n              key={instrument.id}\n              value={instrument.id}\n              primaryText={instrument.name}\n            />\n          )}\n        </Field>\n        <Field name=\"difficulty\"\n          min={1}\n          max={20}\n          step={1}\n          textColor={textColor}\n          component={RenderSliderField}\n          label=\"Difficulty\" />\n        <Field name=\"progress\"\n          min={0}\n          max={4}\n          step={1}\n          textColor={textColor}\n          component={RenderSliderField}\n          label=\"Progress\" />\n      </form>\n    </Dialog>\n  )\n};\n\nAddSongModal.propTypes = {\n  addSong:     React.PropTypes.func,\n  genres:      React.PropTypes.array,\n  instruments: React.PropTypes.array,\n  hideModal:   React.PropTypes.func,\n  isOpen:      React.PropTypes.bool\n};\n\nexport default muiThemeable()(reduxForm({ form: 'addSongForm', validate })(AddSongModal));\n"]}
{"version":3,"sources":["src/redux-orm/Session.js"],"names":["Session","schema","db","state","withMutations","batchToken","getEmptyState","initialState","_accessedModels","modelData","models","getModelClasses","sessionBoundModels","map","sessionBoundModel","modelClass","modelName","get","connect","getDataForModel","accessed","updateSpec","tx","result","update","status","Error","toString","payload","querySpec","table","markAccessed","query","filter","model"],"mappings":"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","file":"Session.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import { getBatchToken } from 'immutable-ops';\n\nimport { SUCCESS, FAILURE } from './constants';\nimport { warnDeprecated } from './utils';\n\n\nconst Session = class Session {\n    /**\n     * Creates a new Session.\n     *\n     * @param  {Database} db - a {@link Database} instance\n     * @param  {Object} state - the database state\n     * @param  {Boolean} [withMutations] - whether the session should mutate data\n     * @param  {Object} [batchToken] - used by the backend to identify objects that can be\n     *                                 mutated.\n     */\n    constructor(schema, db, state, withMutations, batchToken) {\n        this.schema = schema;\n        this.db = db;\n        this.state = state || db.getEmptyState();\n        this.initialState = this.state;\n\n        this.withMutations = !!withMutations;\n        this.batchToken = batchToken || getBatchToken();\n\n        this._accessedModels = {};\n        this.modelData = {};\n\n        this.models = schema.getModelClasses();\n\n        this.sessionBoundModels = this.models.map(modelClass => {\n            const sessionBoundModel = class SessionBoundModel extends modelClass {};\n            Object.defineProperty(this, modelClass.modelName, {\n                get: () => sessionBoundModel,\n            });\n\n            sessionBoundModel.connect(this);\n            return sessionBoundModel;\n        });\n    }\n\n    markAccessed(modelName) {\n        this.getDataForModel(modelName).accessed = true;\n    }\n\n    get accessedModels() {\n        return this.sessionBoundModels\n            .filter(model => !!this.getDataForModel(model.modelName).accessed)\n            .map(model => model.modelName);\n    }\n\n    getDataForModel(modelName) {\n        if (!this.modelData[modelName]) {\n            this.modelData[modelName] = {};\n        }\n        return this.modelData[modelName];\n    }\n\n    /**\n     * Applies update to a model state.\n     *\n     * @private\n     * @param {Object} update - the update object. Must have keys\n     *                          `type`, `payload`.\n     */\n    applyUpdate(updateSpec) {\n        const { batchToken, withMutations } = this;\n        const tx = { batchToken, withMutations };\n        const result = this.db.update(updateSpec, tx, this.state);\n        const { status, state } = result;\n\n        if (status === SUCCESS) {\n            this.state = state;\n        } else {\n            throw new Error(`Applying update failed: ${result.toString()}`);\n        }\n\n        return result.payload;\n    }\n\n    query(querySpec) {\n        const { table } = querySpec;\n        this.markAccessed(table);\n        return this.db.query(querySpec, this.state);\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    getNextState() {\n        warnDeprecated(\n            'Session.prototype.getNextState function is deprecated. Access ' +\n            'the Session.prototype.state property instead.'\n        );\n        return this.state;\n    }\n\n    reduce() {\n        throw new Error(\n            'Session.prototype.reduce is removed. The Redux integration API ' +\n            'is now decoupled from ORM and Session - see the 0.9 migration guide ' +\n            'in the GitHub repo.'\n        );\n    }\n};\n\nexport default Session;\n"]}
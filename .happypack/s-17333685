'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.models = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _reduxOrm = require('redux-orm');

var _actionTypes = require('./actionTypes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BaseModel = function (_Model) {
  (0, _inherits3.default)(BaseModel, _Model);

  function BaseModel() {
    (0, _classCallCheck3.default)(this, BaseModel);
    return (0, _possibleConstructorReturn3.default)(this, (BaseModel.__proto__ || (0, _getPrototypeOf2.default)(BaseModel)).apply(this, arguments));
  }

  (0, _createClass3.default)(BaseModel, null, [{
    key: 'loadData',
    value: function loadData(data, Model) {
      var _this2 = this;

      data.forEach(function (d) {
        _this2.create(d);
      });
    }
  }]);
  return BaseModel;
}(_reduxOrm.Model);

// ------------------------------------
// Song
// ------------------------------------

var Song = function (_BaseModel) {
  (0, _inherits3.default)(Song, _BaseModel);

  function Song() {
    (0, _classCallCheck3.default)(this, Song);
    return (0, _possibleConstructorReturn3.default)(this, (Song.__proto__ || (0, _getPrototypeOf2.default)(Song)).apply(this, arguments));
  }

  (0, _createClass3.default)(Song, [{
    key: 'toString',
    value: function toString() {
      return 'Song: ' + this.title;
    }
  }], [{
    key: 'reducer',
    value: function reducer(action, Song, session) {
      var payload = action.payload,
          type = action.type;

      switch (type) {
        case _actionTypes.ADD_SONG:
          var newSong = action.payload.song;
          var props = (0, _assign2.default)({}, payload, { newSong: newSong });
          Song.create(props);
          break;
        case 'SONGS_REQUEST':
          // remove all songs when fetching
          this.all().delete();
          break;
        case 'LOAD_SONGS':
          this.loadData(action.payload, Song);
          break;
        case _actionTypes.DELETE_SONG:
          Song.withId(payload).delete();
          break;
        case _actionTypes.UPDATE_SONG:
          break;
      }
    }
  }]);
  return Song;
}(BaseModel);

Song.modelName = 'Song';

Song.fields = {
  artist: (0, _reduxOrm.fk)("Artist"),
  instrument: (0, _reduxOrm.fk)("Instrument"),
  genres: (0, _reduxOrm.many)("Genre")
};

Song.shallowFields = {
  id: 'number',
  title: 'string',
  difficulty: 'number',
  progress: 'number'
};

// ------------------------------------
// Artist
// ------------------------------------


var Artist = function (_BaseModel2) {
  (0, _inherits3.default)(Artist, _BaseModel2);

  function Artist(artist) {
    (0, _classCallCheck3.default)(this, Artist);

    artist.fullName = artist.lastName + ', ' + artist.firstName;
    return (0, _possibleConstructorReturn3.default)(this, (Artist.__proto__ || (0, _getPrototypeOf2.default)(Artist)).call(this, artist));
  }

  (0, _createClass3.default)(Artist, [{
    key: 'toString',
    value: function toString() {
      return 'Artist: ' + this.lastName;
    }
  }], [{
    key: 'reducer',
    value: function reducer(action, Artist, session) {
      var payload = action.payload,
          type = action.type;

      switch (type) {
        case 'SONGS_REQUEST':
          // remove all songs when fetching
          this.all().delete();
          break;
        case 'LOAD_ARTISTS':
          this.loadData(action.payload, Artist);
          break;
        default:
          break;
      }
    }
  }]);
  return Artist;
}(BaseModel);

Artist.modelName = 'Artist';

Artist.fields = {};

Artist.shallowFields = {
  id: 'number',
  name: 'string',
  icon: 'string'
};

// ------------------------------------
// Filter
// ------------------------------------


var Filter = function (_BaseModel3) {
  (0, _inherits3.default)(Filter, _BaseModel3);

  function Filter() {
    (0, _classCallCheck3.default)(this, Filter);
    return (0, _possibleConstructorReturn3.default)(this, (Filter.__proto__ || (0, _getPrototypeOf2.default)(Filter)).apply(this, arguments));
  }

  (0, _createClass3.default)(Filter, [{
    key: 'toString',
    value: function toString() {
      return 'Filter: ' + this.name;
    }
  }], [{
    key: 'reducer',
    value: function reducer(action, Filter, session) {
      var payload = action.payload,
          type = action.type;

      switch (type) {
        default:
          break;
      }
    }
  }]);
  return Filter;
}(BaseModel);

Filter.modelName = 'Filter';

Filter.fields = {};

Filter.shallowFields = {
  id: 'number',
  name: 'string'
};

// ------------------------------------
// Genre
// ------------------------------------

var Genre = function (_BaseModel4) {
  (0, _inherits3.default)(Genre, _BaseModel4);

  function Genre() {
    (0, _classCallCheck3.default)(this, Genre);
    return (0, _possibleConstructorReturn3.default)(this, (Genre.__proto__ || (0, _getPrototypeOf2.default)(Genre)).apply(this, arguments));
  }

  (0, _createClass3.default)(Genre, [{
    key: 'toString',
    value: function toString() {
      return 'Genre: ' + this.name;
    }
  }], [{
    key: 'reducer',
    value: function reducer(action, Genre, session) {
      var payload = action.payload,
          type = action.type;

      switch (type) {
        case 'SONGS_REQUEST':
          // remove all songs when fetching
          this.all().delete();
          break;
        case 'LOAD_GENRES':
          this.loadData(action.payload, this);
          break;
        default:
          break;
      }
    }
  }]);
  return Genre;
}(BaseModel);

Genre.modelName = 'Genre';

Genre.fields = {};

Genre.shallowFields = {
  id: 'number',
  name: 'string',
  icon: 'string'
};

// ------------------------------------
// Instruments
// ------------------------------------

var Instrument = function (_BaseModel5) {
  (0, _inherits3.default)(Instrument, _BaseModel5);

  function Instrument() {
    (0, _classCallCheck3.default)(this, Instrument);
    return (0, _possibleConstructorReturn3.default)(this, (Instrument.__proto__ || (0, _getPrototypeOf2.default)(Instrument)).apply(this, arguments));
  }

  (0, _createClass3.default)(Instrument, [{
    key: 'toString',
    value: function toString() {
      return 'Instrument: ' + this.name;
    }
  }], [{
    key: 'reducer',
    value: function reducer(action, Instrument, session) {
      var payload = action.payload,
          type = action.type;

      switch (type) {
        case 'SONGS_REQUEST':
          // remove all songs when fetching
          this.all().delete();
          break;
        case 'LOAD_INSTRUMENTS':
          this.loadData(action.payload, this);
          break;
        default:
          break;
      }
    }
  }]);
  return Instrument;
}(BaseModel);

Instrument.modelName = 'Instrument';

Instrument.fields = {};

Instrument.shallowFields = {
  id: 'number',
  name: 'string',
  icon: 'string'
};

exports.Song = Song;
exports.Artist = Artist;
exports.Instrument = Instrument;
exports.Genre = Genre;
exports.Filter = Filter;
var models = exports.models = [Song, Filter, Genre, Instrument, Artist];
{"version":3,"sources":["src/middleware/api.js"],"names":["CALL_API","apiFetch","endpoint","schema","then","response","json","ok","reject","data","store","callAPI","action","next","types","getState","Error","Array","isArray","length","every","type","actionWith","finalAction","requestType","successType","failureType","responseSuccess","payload","responseFailure","error","message","console","info"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA;;AAEA;AACO,IAAMA,8BAAW,sBAAO,UAAP,CAAjB;;AAGP;AACA;AACA,IAAMC,WAAW,SAAXA,QAAW,CAACC,QAAD,EAAWC,MAAX,EAAsB;;AAErCD,aAAW,8BAA8BA,QAAzC;AACA,SAAO,qBAAMA,QAAN,EACJE,IADI,CACC;AAAA,WACFC,SAASC,IAAT,GACCF,IADD,CACM,gBAAQ;AACZ,UAAI,CAACC,SAASE,EAAd,EAAkB;AAChB,eAAO,kBAAQC,MAAR,CAAeF,IAAf,CAAP;AACD;AACD,aAAOA,KAAKG,IAAZ;AACD,KAND,CADE;AAAA,GADD,CAAP;AAUD,CAbD;;kBAee,UAACC,KAAD;AAAA,SAAW;AAAA,WAAQ,kBAAU;AAC3C,UAAMC,UAAUC,OAAOZ,QAAP,CAAhB;AACA,UAAI,OAAOW,OAAP,KAAmB,WAAvB,EAAoC;AACnC,eAAOE,KAAKD,MAAL,CAAP;AACA;;AAJ0C,UAMpCV,QANoC,GAMvBS,OANuB,CAMpCT,QANoC;AAAA,UAOlCY,KAPkC,GAOxBH,OAPwB,CAOlCG,KAPkC;;;AAS1C,UAAI,OAAOZ,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,mBAAWA,SAASQ,MAAMK,QAAN,EAAT,CAAX;AACD;AACD,UAAI,OAAOb,QAAP,KAAoB,QAAxB,EAAkC;AAChC,cAAM,IAAIc,KAAJ,CAAU,gCAAV,CAAN;AACD;AACD,UAAI,CAACC,MAAMC,OAAN,CAAcJ,KAAd,CAAD,IAAyBA,MAAMK,MAAN,KAAiB,CAA9C,EAAiD;AAC/C,cAAM,IAAIH,KAAJ,CAAU,0CAAV,CAAN;AACD;AACD,UAAI,CAACF,MAAMM,KAAN,CAAY;AAAA,eAAS,OAAOC,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,UAArD;AAAA,OAAZ,CAAL,EAAqF;AACnF,cAAM,IAAIL,KAAJ,CAAU,mDAAV,CAAN;AACD;;AAED,UAAMM,aAAa,SAAbA,UAAa,OAAQ;AACzB,YAAMC,cAAc,sBAAc,EAAd,EAAkBX,MAAlB,EAA0BH,IAA1B,CAApB;AACA,eAAOc,YAAYvB,QAAZ,CAAP;AACA,eAAOuB,WAAP;AACD,OAJD;;AAtB0C,gDA4BQT,KA5BR;AAAA,UA4BlCU,WA5BkC;AAAA,UA4BrBC,WA5BqB;AAAA,UA4BRC,WA5BQ;;AA8B1Cb,WAAKS,WAAW,EAAED,MAAMG,WAAR,EAAX,CAAL;;AAEA,UAAMG,kBAAkB,SAAlBA,eAAkB,CAACtB,QAAD,EAAc;AACpC,YAAI,OAAOoB,WAAP,KAAuB,UAA3B,EAAuC;AACrC,iBAAOZ,KACLY,YAAYpB,QAAZ,CADK,CAAP;AAGD,SAJD,MAIO;AACL,iBAAOQ,KACLS,WAAW;AACTM,qBAASvB,QADA;AAETgB,kBAAMI;AAFG,WAAX,CADK,CAAP;AAKD;AACF,OAZD;;AAcA,UAAMI,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD;AAAA,eACtBjB,KACES,WAAW;AACTD,gBAAMK,WADG;AAETI,iBAAOA,MAAMC,OAAN,IAAiB;AAFf,SAAX,CADF,CADsB;AAAA,OAAxB;;AAOAC,cAAQC,IAAR,CAAa,eAAe/B,QAA5B;AACA,aAAOD,SAASC,QAAT,EACJE,IADI,CACCuB,eADD,EACkBE,eADlB,CAAP;AAED,KAxDyB;AAAA,GAAX;AAAA,C","file":"api.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import fetch from 'store/auth/utils/fetch';\n\n// TODO: make api return nested data, implement normalizing here\n\n// Action key that carries API call info interpreted by this Redux middleware.\nexport const CALL_API = Symbol('Call API')\n\n\n// Fetches an API response and normalizes the result JSON according to schema.\n// This makes every API response have the same shape, regardless of how nested it was.\nconst apiFetch = (endpoint, schema) => {\n\n  endpoint = 'http://localhost:3000/api' + endpoint;\n  return fetch(endpoint)\n    .then(response =>\n        response.json()\n        .then(json => {\n          if (!response.ok) {\n            return Promise.reject(json)\n          }\n          return json.data;\n        })\n    )\n}\n\nexport default (store) => next => action => {\n\tconst callAPI = action[CALL_API]\n\tif (typeof callAPI === 'undefined') {\n\t\treturn next(action);\n\t}\n\n  let { endpoint } = callAPI;\n  const { types } = callAPI;\n\n  if (typeof endpoint === 'function') {\n    endpoint = endpoint(store.getState());\n  }\n  if (typeof endpoint !== 'string') {\n    throw new Error('Specify a string endpoint URL.');\n  }\n  if (!Array.isArray(types) || types.length !== 3) {\n    throw new Error('Expected an array of three action types.');\n  }\n  if (!types.every(type => (typeof type === 'string' || typeof type === 'function') )) {\n    throw new Error('Expected action types to be strings or functions.');\n  }\n\n  const actionWith = data => {\n    const finalAction = Object.assign({}, action, data);\n    delete finalAction[CALL_API];\n    return finalAction;\n  }\n\n  const [ requestType, successType, failureType ] = types;\n\n  next(actionWith({ type: requestType }));\n\n  const responseSuccess = (response) => {\n    if (typeof successType === 'function') {\n      return next(\n        successType(response)\n      );\n    } else {\n      return next(\n        actionWith({\n          payload: response,\n          type: successType\n        }));\n    }\n  }\n\n  const responseFailure = (error) =>\n    next(\n      actionWith({\n        type: failureType,\n        error: error.message || 'Something bad happened'\n      }))\n\n  console.info(\"Fetching: \" + endpoint);\n  return apiFetch(endpoint)\n    .then(responseSuccess, responseFailure);\n};\n\n\n"]}
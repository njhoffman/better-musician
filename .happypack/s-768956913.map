{"version":3,"sources":["src/redux-orm/ORM.js"],"names":["DeprecatedSchema","ORM_DEFAULTS","createDatabase","ORM","opts","registry","implicitThroughModels","installedFields","models","forEach","model","invalidateClassCache","registerManyToManyModelsFor","push","db","generateSchemaSpec","console","info","fields","thisModelName","modelName","fieldInstance","fieldName","through","toModelName","fromFieldName","toFieldName","Through","id","found","concat","Error","_setupModelPrototypes","querySetClass","hasOwnProperty","isSetUp","isFieldInstalled","install","setFieldInstalled","_attachQuerySetMethods","getModelClasses","tables","reduce","spec","modelClass","tableName","tableSpec","_getTableOpts","getDatabase","getEmptyState","state","mutableSession","session","args"],"mappings":"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","file":"ORM.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import forOwn from 'lodash/forOwn';\nimport find from 'lodash/find';\n\nimport Session from './Session';\nimport Model from './Model';\nimport { createDatabase as defaultCreateDatabase } from './db';\nimport {\n    ForeignKey,\n    ManyToMany,\n    attr,\n} from './fields';\n\nimport {\n    createReducer,\n    createSelector,\n} from './redux';\n\nimport {\n    m2mName,\n    attachQuerySetMethods,\n    m2mToFieldName,\n    m2mFromFieldName,\n    warnDeprecated,\n} from './utils';\n\nconst ORM_DEFAULTS = {\n    createDatabase: defaultCreateDatabase,\n};\n\n/**\n * ORM - the Object Relational Mapper.\n *\n * Use instances of this class to:\n *\n * - Register your {@link Model} classes using {@link ORM#register}\n * - Get the empty state for the underlying database with {@link ORM#getEmptyState}\n * - Start an immutable database session with {@link ORM#session}\n * - Start a mutating database session with {@link ORM#mutableSession}\n *\n * Internally, this class handles generating a schema specification from models\n * to the database.\n */\nexport const ORM = class ORM {\n    /**\n     * Creates a new ORM instance.\n     */\n    constructor(opts) {\n        const { createDatabase } = Object.assign({}, ORM_DEFAULTS, (opts || {}));\n        this.createDatabase = createDatabase;\n        this.registry = [];\n        this.implicitThroughModels = [];\n        this.installedFields = {};\n    }\n\n    /**\n     * Registers a {@link Model} class to the ORM.\n     *\n     * If the model has declared any ManyToMany fields, their\n     * through models will be generated and registered with\n     * this call, unless a custom through model has been specified.\n     *\n     * @param  {...Model} model - a {@link Model} class to register\n     * @return {undefined}\n     */\n    register(...models) {\n        models.forEach(model => {\n            model.invalidateClassCache();\n\n            this.registerManyToManyModelsFor(model);\n            this.registry.push(model);\n        });\n        this.db = this.createDatabase(this.generateSchemaSpec());\n      console.info(\"REGISERING\", this.db);\n    }\n\n    registerManyToManyModelsFor(model) {\n        const fields = model.fields;\n        const thisModelName = model.modelName;\n\n        forOwn(fields, (fieldInstance, fieldName) => {\n            if (fieldInstance instanceof ManyToMany && !fieldInstance.through) {\n                let toModelName;\n                if (fieldInstance.toModelName === 'this') {\n                    toModelName = thisModelName;\n                } else {\n                    toModelName = fieldInstance.toModelName;\n                }\n\n                const fromFieldName = m2mFromFieldName(thisModelName);\n                const toFieldName = m2mToFieldName(toModelName);\n\n                const Through = class ThroughModel extends Model {};\n\n                Through.modelName = m2mName(thisModelName, fieldName);\n\n                Through.fields = {\n                    id: attr(),\n                    [fromFieldName]: new ForeignKey(thisModelName),\n                    [toFieldName]: new ForeignKey(toModelName),\n                };\n\n                Through.invalidateClassCache();\n                this.implicitThroughModels.push(Through);\n            }\n        });\n    }\n\n    /**\n     * Gets a {@link Model} class by its name from the registry.\n     * @param  {string} modelName - the name of the {@link Model} class to get\n     * @throws If {@link Model} class is not found.\n     * @return {Model} the {@link Model} class, if found\n     */\n    get(modelName) {\n        const found = find(\n            this.registry.concat(this.implicitThroughModels),\n            (model) => model.modelName === modelName\n        );\n\n        if (typeof found === 'undefined') {\n            throw new Error(`Did not find model ${modelName} from registry.`);\n        }\n        return found;\n    }\n\n    getModelClasses() {\n        this._setupModelPrototypes(this.registry);\n        this._setupModelPrototypes(this.implicitThroughModels);\n        return this.registry.concat(this.implicitThroughModels);\n    }\n\n    _attachQuerySetMethods(model) {\n        const { querySetClass } = model;\n        attachQuerySetMethods(model, querySetClass);\n    }\n\n    isFieldInstalled(modelName, fieldName) {\n        return this.installedFields.hasOwnProperty(modelName)\n            ? !!this.installedFields[modelName][fieldName]\n            : false;\n    }\n\n    setFieldInstalled(modelName, fieldName) {\n        if (!this.installedFields.hasOwnProperty(modelName)) {\n            this.installedFields[modelName] = {};\n        }\n        this.installedFields[modelName][fieldName] = true;\n    }\n\n    _setupModelPrototypes(models) {\n        models.forEach(model => {\n            if (!model.isSetUp) {\n                const fields = model.fields;\n                forOwn(fields, (fieldInstance, fieldName) => {\n                    if (!this.isFieldInstalled(model.modelName, fieldName)) {\n                        fieldInstance.install(model, fieldName, this);\n                        this.setFieldInstalled(model.modelName, fieldName);\n                    }\n                });\n                this._attachQuerySetMethods(model);\n                model.isSetUp = true;\n            }\n        });\n    }\n\n    generateSchemaSpec() {\n        const models = this.getModelClasses();\n        const tables = models.reduce((spec, modelClass) => {\n            const tableName = modelClass.modelName;\n            const tableSpec = modelClass._getTableOpts();\n            spec[tableName] = Object.assign({}, { fields: modelClass.fields }, tableSpec);\n            return spec;\n        }, {});\n        return { tables };\n    }\n\n    getDatabase() {\n        if (!this.db) {\n            this.db = this.createDatabase(this.generateSchemaSpec());\n        }\n        return this.db;\n    }\n\n    /**\n     * Returns the empty database state.\n     * @return {Object} the empty state\n     */\n    getEmptyState() {\n        return this.getDatabase().getEmptyState();\n    }\n\n    /**\n     * Begins an immutable database session.\n     *\n     * @param  {Object} state  - the state the database manages\n     * @return {Session} a new {@link Session} instance\n     */\n    session(state) {\n        return new Session(this, this.getDatabase(), state);\n    }\n\n    /**\n     * Begins a mutable database session.\n     *\n     * @param  {Object} state  - the state the database manages\n     * @return {Session} a new {@link Session} instance\n     */\n    mutableSession(state) {\n        return new Session(this, this.getDatabase(), state, true);\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    withMutations(state) {\n        warnDeprecated(\n            'ORM.prototype.withMutations is deprecated. ' +\n            'Use ORM.prototype.mutableSession instead.'\n        );\n\n        return this.mutableSession(state);\n    }\n\n    from(state) {\n        warnDeprecated(\n            'ORM.prototype.from function is deprecated. ' +\n            'Use ORM.prototype.session instead.'\n        );\n        return this.session(state);\n    }\n\n    reducer() {\n        warnDeprecated(\n            'ORM.prototype.reducer is deprecated. Access ' +\n            'the Session.prototype.state property instead.'\n        );\n        return createReducer(this);\n    }\n\n    createSelector(...args) {\n        warnDeprecated(\n            'ORM.prototype.createSelector is deprecated. ' +\n            'Import `createSelector` from Redux-ORM instead.'\n        );\n        return createSelector(this, ...args);\n    }\n\n    getDefaultState() {\n        warnDeprecated(\n            'ORM.prototype.getDefaultState is deprecated. Use ' +\n            'the ORM.prototype.getEmptyState instead.'\n        );\n        return this.getEmptyState();\n    }\n\n    define() {\n        throw new Error(\n            'ORM.prototype.define is removed. Please define a Model class.'\n        );\n    }\n};\n\nexport function DeprecatedSchema() {\n    throw new Error(\n        'Schema has been renamed to ORM. Please import ORM instead of Schema ' +\n        'from Redux-ORM.'\n    );\n}\n\nexport default ORM;\n"]}
{"version":3,"sources":["src/store/auth/actions/oauth-sign-in.js"],"names":["oAuthSignInStart","oAuthSignInComplete","oAuthSignInError","oAuthSignIn","C","OAUTH_SIGN_IN_START","OAUTH_SIGN_IN_COMPLETE","OAUTH_SIGN_IN_ERROR","openPopup","listenForCredentials","endpointKey","popup","provider","resolve","reject","creds","location","err","uid","close","SAVED_CREDS_KEY","then","data","catch","errors","closed","setTimeout","authenticate","url","tab","name","endpoint","type","user","params","prevEndpointKey","dispatch","currentEndpointKey"],"mappings":"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","file":"oauth-sign-in.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import * as C from \"../utils/constants\";\r\nimport {getAllParams, normalizeTokenKeys} from \"../utils/parse-url\";\r\nimport {getOAuthUrl} from \"../utils/session-storage\";\r\nimport {\r\n  setCurrentEndpointKey,\r\n  getCurrentEndpointKey,\r\n  getTokenValidationPath,\r\n  persistData,\r\n} from \"../utils/session-storage\";\r\nimport {storeCurrentEndpointKey} from \"./configure\";\r\nimport {parseResponse} from \"../utils/handle-fetch-response\";\r\nimport fetch from \"../utils/fetch\";\r\nimport _openPopup from \"../utils/popup\";\r\n\r\nexport const OAUTH_SIGN_IN_START    = \"OAUTH_SIGN_IN_START\";\r\nexport const OAUTH_SIGN_IN_COMPLETE = \"OAUTH_SIGN_IN_COMPLETE\";\r\nexport const OAUTH_SIGN_IN_ERROR    = \"OAUTH_SIGN_IN_ERROR\";\r\n\r\n// hook for rewire\r\nvar openPopup = _openPopup;\r\n\r\nfunction listenForCredentials (endpointKey, popup, provider, resolve, reject) {\r\n  if (!resolve) {\r\n    return new Promise((resolve, reject) => {\r\n      listenForCredentials(endpointKey, popup, provider, resolve, reject);\r\n    });\r\n\r\n  } else {\r\n    let creds;\r\n\r\n    try {\r\n      creds = getAllParams(popup.location);\r\n    } catch (err) {}\r\n\r\n    if (creds && creds.uid) {\r\n      popup.close();\r\n      persistData(C.SAVED_CREDS_KEY, normalizeTokenKeys(creds));\r\n      fetch(getTokenValidationPath(endpointKey))\r\n        .then(parseResponse)\r\n        .then(({data}) => resolve(data))\r\n        .catch(({errors}) => reject({errors}));\r\n    } else if (popup.closed) {\r\n      reject({errors: \"Authentication was cancelled.\"})\r\n    } else {\r\n      setTimeout(() => {\r\n        listenForCredentials(endpointKey, popup, provider, resolve, reject);\r\n      }, 0);\r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction authenticate({endpointKey, provider, url, tab=false}) {\r\n  let name = (tab) ? \"_blank\" : provider;\r\n  let popup = openPopup(provider, url, name);\r\n  return listenForCredentials(endpointKey, popup, provider);\r\n}\r\n\r\n\r\nexport function oAuthSignInStart(provider, endpoint) {\r\n  return { type: OAUTH_SIGN_IN_START, provider, endpoint };\r\n}\r\nexport function oAuthSignInComplete(user, endpoint) {\r\n  return { type: OAUTH_SIGN_IN_COMPLETE, user, endpoint };\r\n}\r\nexport function oAuthSignInError(errors, endpoint) {\r\n  return { type: OAUTH_SIGN_IN_ERROR, errors, endpoint };\r\n}\r\nexport function oAuthSignIn({provider, params, endpointKey}) {\r\n  return dispatch => {\r\n    // save previous endpoint key in case of failure\r\n    var prevEndpointKey = getCurrentEndpointKey();\r\n\r\n    // necessary for `fetch` to recognize the response as an api request\r\n    setCurrentEndpointKey(endpointKey);\r\n    dispatch(storeCurrentEndpointKey(endpointKey));\r\n\r\n    var currentEndpointKey = getCurrentEndpointKey();\r\n\r\n    dispatch(oAuthSignInStart(provider, currentEndpointKey));\r\n\r\n    let url = getOAuthUrl({provider, params, currentEndpointKey});\r\n\r\n    return authenticate({endpointKey, provider, url})\r\n      .then(user => dispatch(oAuthSignInComplete(user, currentEndpointKey)))\r\n      .catch(({ errors }) => {\r\n        // revert endpoint key to what it was before failed request\r\n        setCurrentEndpointKey(prevEndpointKey);\r\n        dispatch(storeCurrentEndpointKey(prevEndpointKey));\r\n        dispatch(oAuthSignInError(errors, currentEndpointKey))\r\n        throw errors;\r\n      });\r\n  };\r\n}\r\n"]}
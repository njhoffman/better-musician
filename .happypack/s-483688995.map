{"version":3,"sources":["src/redux-orm/descriptors.js"],"names":["attrDescriptor","fieldName","get","_fields","set","value","enumerable","configurable","forwardManyToOneDescriptor","declaredToModelName","currentSession","getClass","session","declaredToModel","toId","withId","undefined","getId","update","forwardOneToOneDescriptor","backwardOneToOneDescriptor","declaredFieldName","declaredFromModelName","declaredFromModel","thisId","found","e","Error","backwardManyToOneDescriptor","filter","manyToManyDescriptor","throughModelName","throughFields","reverse","throughModel","fromFieldName","from","toFieldName","to","lookupObj","throughQs","toIds","toRefArray","map","obj","qsFromModel","qs","attrs","idAttribute","add","args","idsToAdd","filterWithAttr","existingQs","through","exists","existingIds","toAddModel","modelName","addFromModel","forEach","create","id","clear","delete","remove","entities","idsToRemove","attrInIdsToRemove","entitiesToDelete","count","length","entitiesToDeleteIds","unexistingIds","toDeleteModel","deleteFromModel"],"mappings":"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","file":"descriptors.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import difference from 'lodash/difference';\nimport {\n    normalizeEntity,\n    includes,\n} from './utils';\n\n\nfunction attrDescriptor(fieldName) {\n    return {\n        get() {\n            return this._fields[fieldName];\n        },\n\n        set(value) {\n            return this.set(fieldName, value);\n        },\n\n        enumerable: true,\n        configurable: true,\n    };\n}\n\n// Forwards side a Foreign Key: returns one object.\n// Also works as forwardsOneToOneDescriptor.\nfunction forwardManyToOneDescriptor(fieldName, declaredToModelName) {\n    return {\n        get() {\n            const currentSession = this.getClass().session;\n            const declaredToModel = currentSession[declaredToModelName];\n            const toId = this._fields[fieldName];\n            if (typeof toId !== 'undefined' && toId !== null) {\n                return declaredToModel.withId(toId);\n            }\n            return undefined;\n        },\n        set(value) {\n            const currentSession = this.getClass().session;\n            const declaredToModel = currentSession[declaredToModelName];\n\n            let toId;\n            if (value instanceof declaredToModel) {\n                toId = value.getId();\n            } else {\n                toId = value;\n            }\n\n            this.update({ [fieldName]: toId });\n        },\n    };\n}\n\nconst forwardOneToOneDescriptor = forwardManyToOneDescriptor;\n\nfunction backwardOneToOneDescriptor(declaredFieldName, declaredFromModelName) {\n    return {\n        get() {\n            const currentSession = this.getClass().session;\n            const declaredFromModel = currentSession[declaredFromModelName];\n            const thisId = this.getId();\n            let found;\n            try {\n                found = declaredFromModel.get({ [declaredFieldName]: thisId });\n            } catch (e) {\n                return null;\n            }\n            return found;\n        },\n        set() {\n            throw new Error('Can\\'t mutate a reverse one-to-one relation.');\n        },\n    };\n}\n\n// Reverse side of a Foreign Key: returns many objects.\nfunction backwardManyToOneDescriptor(declaredFieldName, declaredFromModelName) {\n    return {\n        get() {\n            const currentSession = this.getClass().session;\n            const declaredFromModel = currentSession[declaredFromModelName];\n            const thisId = this.getId();\n            return declaredFromModel.filter({ [declaredFieldName]: thisId });\n        },\n        set() {\n            throw new Error('Can\\'t mutate a reverse many-to-one relation.');\n        },\n    };\n}\n\n// Both sides of Many to Many, use the reverse flag.\nfunction manyToManyDescriptor(\n    declaredFromModelName,\n    declaredToModelName,\n    throughModelName,\n    throughFields,\n    reverse) {\n    return {\n        get() {\n            const currentSession = this.getClass().session;\n            const declaredFromModel = currentSession[declaredFromModelName];\n            const declaredToModel = currentSession[declaredToModelName];\n            const throughModel = currentSession[throughModelName];\n            const thisId = this.getId();\n\n            const fromFieldName = throughFields.from;\n            const toFieldName = throughFields.to;\n\n            const lookupObj = {};\n            if (!reverse) {\n                lookupObj[fromFieldName] = thisId;\n            } else {\n                lookupObj[toFieldName] = thisId;\n            }\n\n            const throughQs = throughModel.filter(lookupObj);\n            const toIds = throughQs.toRefArray().map(obj => obj[reverse ? fromFieldName : toFieldName]);\n\n            const qsFromModel = reverse ? declaredFromModel : declaredToModel;\n            const qs = qsFromModel.filter(attrs =>\n                includes(toIds, attrs[qsFromModel.idAttribute])\n            );\n\n            qs.add = function add(...args) {\n                const idsToAdd = args.map(normalizeEntity);\n\n                const filterWithAttr = reverse ? fromFieldName : toFieldName;\n\n                const existingQs = throughQs.filter(through => includes(idsToAdd, through[filterWithAttr]));\n\n                if (existingQs.exists()) {\n                    const existingIds = existingQs\n                        .toRefArray()\n                        .map(through => through[filterWithAttr]);\n\n                    const toAddModel = reverse\n                        ? declaredFromModel.modelName\n                        : declaredToModel.modelName;\n\n                    const addFromModel = reverse\n                        ? declaredToModel.modelName\n                        : declaredFromModel.modelName;\n                    throw new Error(`Tried to add already existing ${toAddModel} id(s) ${existingIds} to the ${addFromModel} instance with id ${thisId}`);\n                }\n\n                idsToAdd.forEach(id => {\n                    throughModel.create({\n                        [fromFieldName]: thisId,\n                        [toFieldName]: id,\n                    });\n                });\n            };\n\n            qs.clear = function clear() {\n                throughQs.delete();\n            };\n\n            qs.remove = function remove(...entities) {\n                const idsToRemove = entities.map(normalizeEntity);\n\n                const attrInIdsToRemove = reverse ? fromFieldName : toFieldName;\n                const entitiesToDelete = throughQs.filter(\n                    through => includes(idsToRemove, through[attrInIdsToRemove])\n                );\n\n                if (entitiesToDelete.count() !== idsToRemove.length) {\n                    // Tried deleting non-existing entities.\n                    const entitiesToDeleteIds = entitiesToDelete\n                        .toRefArray()\n                        .map(through => through[attrInIdsToRemove]);\n\n                    const unexistingIds = difference(idsToRemove, entitiesToDeleteIds);\n\n                    const toDeleteModel = reverse\n                        ? declaredFromModel.modelName\n                        : declaredToModel.modelName;\n\n                    const deleteFromModel = reverse\n                        ? declaredToModel.modelName\n                        : declaredFromModel.modelName;\n\n                    throw new Error(`Tried to delete non-existing ${toDeleteModel} id(s) ${unexistingIds} from the ${deleteFromModel} instance with id ${thisId}`);\n                }\n\n                entitiesToDelete.delete();\n            };\n\n            return qs;\n        },\n\n        set() {\n            throw new Error('Tried setting a M2M field. Please use the related QuerySet methods add and remove.');\n        },\n    };\n}\n\nexport {\n    attrDescriptor,\n    forwardManyToOneDescriptor,\n    forwardOneToOneDescriptor,\n    backwardOneToOneDescriptor,\n    backwardManyToOneDescriptor,\n    manyToManyDescriptor,\n};\n"]}
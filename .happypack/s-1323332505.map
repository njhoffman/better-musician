{"version":3,"sources":["src/store/auth/utils/fetch.js"],"names":["addAuthorizationHeader","url","options","headers","getAuthHeaders","then","updateAuthCredentials","resp","C","isApiRequest","match","accessToken","Authorization","currentHeaders","SAVED_CREDS_KEY","nextHeaders","key","newHeaders","blankHeaders","get"],"mappings":";;;;;;;;;;QAsBgBA,sB,GAAAA,sB;;kBAsDD,UAAUC,GAAV,EAA2B;AAAA,MAAZC,OAAY,uEAAJ,EAAI;;AACxC,MAAI,CAACA,QAAQC,OAAb,EAAsB;AACpBD,YAAQC,OAAR,GAAkB,EAAlB;AACD;AACD,wBAAOD,QAAQC,OAAf,EAAwBC,eAAeH,GAAf,CAAxB;AACA,SAAO,+BAAcA,GAAd,EAAmBC,OAAnB,EACJG,IADI,CACC;AAAA,WAAQC,sBAAsBC,IAAtB,CAAR;AAAA,GADD,CAAP;AAED,C;;AAnFD;;;;AACA;;IAAYC,C;;AACZ;;;;AACA;;;;;;AAQA,IAAIC,eAAe,SAAfA,YAAe,CAASR,GAAT,EAAc;AAC/B,SAAQA,IAAIS,KAAJ,CAAU,+BAAU,4CAAV,CAAV,CAAR;AACD,CAFD;;AAIA;;;;;;;AAOO,SAASV,sBAAT,CAAgCW,WAAhC,EAA6CR,OAA7C,EAAsD;AAC3D,SAAO,sBAAc,EAAd,EAAkBA,OAAlB,EAA2B;AAChCS,+BAAyBD;AADO,GAA3B,CAAP;AAGD;;AAED,SAASP,cAAT,CAAwBH,GAAxB,EAA6B;AAC3B,MAAIQ,aAAaR,GAAb,CAAJ,EAAuB;AACrB;AACA,QAAIY,iBAAiB,kCAAaL,EAAEM,eAAf,KAAmC,EAAxD;AAAA,QACIC,cAAc,EADlB;;AAGA;AACAA,gBAAY,mBAAZ,IAAmC,+BAAnC;;AAEA;AACA,SAAK,IAAIC,GAAT,IAAgB,qCAAhB,EAAkC;AAChCD,kBAAYC,GAAZ,IAAmBH,eAAeG,GAAf,CAAnB;AACD;;AAED,WAAOhB,uBAAuBa,eAAe,cAAf,CAAvB,EAAuDE,WAAvD,CAAP;AACD,GAdD,MAcO;AACL,WAAO,EAAP;AACD;AACF;;AAED,SAAST,qBAAT,CAA+BC,IAA/B,EAAqC;AACnC;AACA,MAAIE,aAAaF,KAAKN,GAAlB,CAAJ,EAA4B;AAC1B;AACA,QAAIgB,aAAa,EAAjB;;AAEA;AACA;AACA,QAAIC,eAAe,IAAnB;;AAEA;AACA,SAAK,IAAIF,GAAT,IAAgB,qCAAhB,EAAkC;AAChCC,iBAAWD,GAAX,IAAkBT,KAAKJ,OAAL,CAAagB,GAAb,CAAiBH,GAAjB,CAAlB;;AAEA,UAAIC,WAAWD,GAAX,CAAJ,EAAqB;AACnBE,uBAAe,KAAf;AACD;AACF;;AAED;AACA,QAAI,CAACA,YAAL,EAAmB;AACjB,uCAAYV,EAAEM,eAAd,EAA+BG,UAA/B;AACD;AACF;;AAED,SAAOV,IAAP;AACD","file":"fetch.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import originalFetch from \"isomorphic-fetch\";\nimport * as C from \"./constants\";\nimport extend from \"extend\";\nimport {\n  getApiUrl,\n  retrieveData,\n  persistData,\n  getTokenFormat,\n  getSessionEndpointKey\n} from \"./session-storage\";\n\nvar isApiRequest = function(url) {\n  return (url.match(getApiUrl(getSessionEndpointKey())));\n};\n\n/**\n * Add access token as a bearer token in accordance to RFC 6750\n *\n * @param {string} accessToken\n * @param {object} headers\n * @returns {object} New extended headers object, with Authorization property\n */\nexport function addAuthorizationHeader(accessToken, headers) {\n  return Object.assign({}, headers, {\n    Authorization: `Bearer ${accessToken}`\n  });\n}\n\nfunction getAuthHeaders(url) {\n  if (isApiRequest(url)) {\n    // fetch current auth headers from storage\n    var currentHeaders = retrieveData(C.SAVED_CREDS_KEY) || {},\n        nextHeaders = {};\n\n    // bust IE cache\n    nextHeaders[\"If-Modified-Since\"] = \"Mon, 26 Jul 1997 05:00:00 GMT\";\n\n    // set header for each key in `tokenFormat` config\n    for (var key in getTokenFormat()) {\n      nextHeaders[key] = currentHeaders[key];\n    }\n\n    return addAuthorizationHeader(currentHeaders['access-token'], nextHeaders);\n  } else {\n    return {};\n  }\n}\n\nfunction updateAuthCredentials(resp) {\n  // check config apiUrl matches the current response url\n  if (isApiRequest(resp.url)) {\n    // set header for each key in `tokenFormat` config\n    var newHeaders = {};\n\n    // set flag to ensure that we don't accidentally nuke the headers\n    // if the response tokens aren't sent back from the API\n    var blankHeaders = true;\n\n    // set header key + val for each key in `tokenFormat` config\n    for (var key in getTokenFormat()) {\n      newHeaders[key] = resp.headers.get(key);\n\n      if (newHeaders[key]) {\n        blankHeaders = false;\n      }\n    }\n\n    // persist headers for next request\n    if (!blankHeaders) {\n      persistData(C.SAVED_CREDS_KEY, newHeaders);\n    }\n  }\n\n  return resp;\n}\n\nexport default function (url, options={}) {\n  if (!options.headers) {\n    options.headers = {}\n  }\n  extend(options.headers, getAuthHeaders(url));\n  return originalFetch(url, options)\n    .then(resp => updateAuthCredentials(resp));\n}\n"]}
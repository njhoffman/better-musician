{"version":3,"sources":["src/redux-orm/QuerySet.js"],"names":["QuerySet","modelClass","clauses","opts","_opts","userOpts","constructor","_evaluate","contents","rows","map","withId","id","toString","join","ModelClass","props","length","Boolean","count","index","at","_new","lookupObj","normalizedLookupObj","filterDescriptor","type","payload","concat","excludeDescriptor","_evaluated","session","querySpec","table","modelName","query","iteratees","orders","orderByDescriptor","mergeObj","applyUpdate","action","toModelArray","forEach","model","_onDelete","Error","methodName","sharedMethods"],"mappings":"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","file":"QuerySet.js","sourceRoot":"/home/vagrant/projects/instrumental","sourcesContent":["import mapValues from 'lodash/mapValues';\nimport {\n    normalizeEntity,\n    warnDeprecated,\n} from './utils';\n\nimport {\n    UPDATE,\n    DELETE,\n    FILTER,\n    EXCLUDE,\n    ORDER_BY,\n} from './constants.js';\n\n/**\n * This class is used to build and make queries to the database\n * and operating the resulting set (such as updating attributes\n * or deleting the records).\n *\n * The queries are built lazily. For example:\n *\n * ```javascript\n * const qs = Book.all()\n *     .filter(book => book.releaseYear > 1999)\n *     .orderBy('name');\n * ```\n *\n * Doesn't execute a query. The query is executed only when\n * you need information from the query result, such as {@link QuerySet#count},\n * {@link QuerySet#toRefArray}. After the query is executed, the resulting\n * set is cached in the QuerySet instance.\n *\n * QuerySet instances also return copies, so chaining filters doesn't\n * mutate the previous instances.\n */\nconst QuerySet = class QuerySet {\n    /**\n     * Creates a QuerySet. The constructor is mainly for internal use;\n     * You should access QuerySet instances from {@link Model}.\n     *\n     * @param  {Model} modelClass - the model class of objects in this QuerySet.\n     * @param  {any[]} clauses - query clauses needed to evaluate the set.\n     * @param {Object} [opts] - additional options\n     */\n    constructor(modelClass, clauses, opts) {\n        Object.assign(this, {\n            modelClass,\n            clauses: clauses || [],\n        });\n\n        this._opts = opts;\n    }\n\n    static addSharedMethod(methodName) {\n        this.sharedMethods = this.sharedMethods.concat(methodName);\n    }\n\n    _new(clauses, userOpts) {\n        const opts = Object.assign({}, this._opts, userOpts);\n        return new this.constructor(this.modelClass, clauses, opts);\n    }\n\n    toString() {\n        this._evaluate();\n        const contents = this.rows.map(id =>\n            this.modelClass.withId(id).toString()\n        ).join('\\n    - ');\n        return `QuerySet contents: \\n    - ${contents}`;\n    }\n\n    /**\n     * Returns an array of the plain objects represented by the QuerySet.\n     * The plain objects are direct references to the store.\n     *\n     * @return {Object[]} references to the plain JS objects represented by\n     *                    the QuerySet\n     */\n    toRefArray() {\n        this._evaluate();\n        return this.rows;\n    }\n\n    /**\n     * Returns an array of {@link Model} instances represented by the QuerySet.\n     * @return {Model[]} model instances represented by the QuerySet\n     */\n    toModelArray() {\n        this._evaluate();\n        const ModelClass = this.modelClass;\n        return this.rows.map(props => new ModelClass(props));\n    }\n\n    /**\n     * Returns the number of {@link Model} instances represented by the QuerySet.\n     *\n     * @return {number} length of the QuerySet\n     */\n    count() {\n        this._evaluate();\n        return this.rows.length;\n    }\n\n    /**\n     * Checks if the {@link QuerySet} instance has any records matching the query\n     * in the database.\n     *\n     * @return {Boolean} `true` if the {@link QuerySet} instance contains entities, else `false`.\n     */\n    exists() {\n        return Boolean(this.count());\n    }\n\n    /**\n     * Returns the {@link Model} instance at index `index` in the {@link QuerySet} instance if\n     * `withRefs` flag is set to `false`, or a reference to the plain JavaScript\n     * object in the model state if `true`.\n     *\n     * @param  {number} index - index of the model instance to get\n     * @return {Model|Object} a {@link Model} instance or a plain JavaScript\n     *                        object at index `index` in the {@link QuerySet} instance\n     */\n    at(index) {\n        this._evaluate();\n        const ModelClass = this.modelClass;\n        return new ModelClass(this.rows[index]);\n    }\n\n    /**\n     * Returns the {@link Model} instance at index 0 in the {@link QuerySet} instance.\n     * @return {Model}\n     */\n    first() {\n        return this.at(0);\n    }\n\n    /**\n     * Returns the {@link Model} instance at index `QuerySet.count() - 1`\n     * @return {Model}\n     */\n    last() {\n        this._evaluate();\n        return this.at(this.rows.length - 1);\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with the same entities.\n     * @return {QuerySet} a new QuerySet with the same entities.\n     */\n    all() {\n        return this._new(this.clauses);\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with entities that match properties in `lookupObj`.\n     *\n     * @param  {Object} lookupObj - the properties to match objects with.\n     * @return {QuerySet} a new {@link QuerySet} instance with objects that passed the filter.\n     */\n    filter(lookupObj) {\n        const normalizedLookupObj = typeof lookupObj === 'object'\n            ? mapValues(lookupObj, normalizeEntity)\n            : lookupObj;\n        const filterDescriptor = { type: FILTER, payload: normalizedLookupObj };\n        return this._new(this.clauses.concat(filterDescriptor));\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with entities that do not match\n     * properties in `lookupObj`.\n     *\n     * @param  {Object} lookupObj - the properties to unmatch objects with.\n     * @return {QuerySet} a new {@link QuerySet} instance with objects that passed the filter.\n     */\n    exclude(lookupObj) {\n        const normalizedLookupObj = typeof lookupObj === 'object'\n            ? mapValues(lookupObj, normalizeEntity)\n            : lookupObj;\n        const excludeDescriptor = { type: EXCLUDE, payload: normalizedLookupObj };\n        return this._new(this.clauses.concat(excludeDescriptor));\n    }\n\n    _evaluate() {\n        if (!this._evaluated) {\n            const session = this.modelClass.session;\n            const querySpec = {\n                table: this.modelClass.modelName,\n                clauses: this.clauses,\n            };\n            const { rows } = session.query(querySpec);\n            this.rows = rows;\n            this._evaluated = true;\n        }\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with entities ordered by `iteratees` in ascending\n     * order, unless otherwise specified. Delegates to `lodash.orderBy`.\n     *\n     * @param  {string[]|Function[]} iteratees - an array where each item can be a string or a\n     *                                           function. If a string is supplied, it should\n     *                                           correspond to property on the entity that will\n     *                                           determine the order. If a function is supplied,\n     *                                           it should return the value to order by.\n     * @param {Boolean[]} [orders] - the sort orders of `iteratees`. If unspecified, all iteratees\n     *                               will be sorted in ascending order. `true` and `'asc'`\n     *                               correspond to ascending order, and `false` and `'desc`\n     *                               to descending order.\n     * @return {QuerySet} a new {@link QuerySet} with objects ordered by `iteratees`.\n     */\n    orderBy(iteratees, orders) {\n        const orderByDescriptor = { type: ORDER_BY, payload: [iteratees, orders] };\n        return this._new(this.clauses.concat(orderByDescriptor));\n    }\n\n    /**\n     * Records an update specified with `mergeObj` to all the objects\n     * in the {@link QuerySet} instance.\n     *\n     * @param  {Object} mergeObj - an object to merge with all the objects in this\n     *                             queryset.\n     * @return {undefined}\n     */\n    update(mergeObj) {\n        this.modelClass.session.applyUpdate({\n            action: UPDATE,\n            query: {\n                table: this.modelClass.modelName,\n                clauses: this.clauses,\n            },\n            payload: mergeObj,\n        });\n        this._evaluated = false;\n    }\n\n    /**\n     * Records a deletion of all the objects in this {@link QuerySet} instance.\n     * @return {undefined}\n     */\n    delete() {\n        this.toModelArray().forEach(model => model._onDelete());\n\n        this.modelClass.session.applyUpdate({\n            action: DELETE,\n            query: {\n                table: this.modelClass.modelName,\n                clauses: this.clauses,\n            },\n        });\n\n        this._evaluated = false;\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    get withModels() {\n        throw new Error(\n            'QuerySet.prototype.withModels is removed. ' +\n            'Use .toModelArray() or predicate functions that ' +\n            'instantiate Models from refs, e.g. new Model(ref).'\n        );\n    }\n\n    get withRefs() {\n        warnDeprecated(\n            'QuerySet.prototype.withRefs is deprecated. ' +\n            'Query building operates on refs only now.'\n        );\n    }\n\n    map() {\n        throw new Error(\n            'QuerySet.prototype.map is removed. ' +\n            'Call .toModelArray() or .toRefArray() first to map.'\n        );\n    }\n\n    forEach() {\n        throw new Error(\n            'QuerySet.prototype.forEach is removed. ' +\n            'Call .toModelArray() or .toRefArray() first to iterate.'\n        );\n    }\n};\n\nQuerySet.sharedMethods = [\n    'count',\n    'at',\n    'all',\n    'last',\n    'first',\n    'exists',\n    'filter',\n    'exclude',\n    'orderBy',\n    'update',\n    'delete',\n];\n\nexport default QuerySet;\n"]}
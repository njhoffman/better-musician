import _ from 'lodash';
import React, { Fragment } from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import {
  Dialog, DialogContent, Divider, Typography,
  DialogActions, DialogTitle, withStyles,
} from '@material-ui/core';
import { Column } from 'react-foundation';

import {
  MdSave as SaveIcon,
  // MdAdd as AddIcon
} from 'react-icons/md';

import AddIcon from '@material-ui/icons/AddBox';

import { EDIT_FIELD_MODAL } from 'constants/ui';
import { uiHideModal, uiModalExit } from 'actions/ui';
import { updateField, addField } from 'actions/api';
import { cancelFieldEdit } from 'routes/Fields/modules/actions';
import { FieldArray, reduxForm } from 'redux-form';

import Button from 'components/Button';
import FormField, { FormRow } from 'components/Field';
import FieldOptions from './FieldOptions';

const styles = (theme) => ({
  dialogPaper: {
    alignSelf: 'start',
    margin: '0px',
    maxHeight: '100vh',
    top: '10%',
    [theme.breakpoints.down('xs')]: {
      width: '100%'
    },
    [theme.breakpoints.up('sm')]: {
      marginTop: theme.app.headerHeight,
      // half of add song modal width
      // minWidth: '225px',
      minWidth: '400px',
    },
    [theme.breakpoints.up('md')]: {
      // half of add song modal width
      // minWidth: '275px'
      minWidth: '500px'
    }
  },
  dialogTitle: {
    textAlign: 'center',
    padding: '12px 12px 6px'
  },
  divider: {
    width: '50%',
    marginLeft: 'auto',
    marginRight: 'auto',
    marginBottom: '10px'
  },
  dialogContent: {
    textAlign: 'center',
    // TODO: why does star slider extend dialog width along X-axis?
    overflowX: 'hidden',
    alignItems: 'flex-start',
    justifyContent: 'center',
    display: 'flex',
    padding: '0 !important', // :first-child padding-top: 24px
  },
  form: {
    alignSelf: 'center',
    maxHeight: '100%',

    width: '100%'
  },
  inline: {
    display: 'inline-block'
  },
  center: {
    marginLeft: 'auto',
    marginRight: 'auto',
    textAlign: 'center'
  }
});

const EditModal = ({
  classes,
  isOpen,
  hideModal,
  modalExit,
  update,
  add,
  cancel,
  editingField,
  formValues,
  ...props
}) => {
  const disabled =  false;
  // TODO: integrate into CustomField model
  const fieldOptions = {
    0: 'Text Box',
    1: 'AutoComplete Box',
    2: 'Select Menu',
    3: 'Multi-Select Menu',
    4: 'Check Box',
    5: 'Radio Buttons',
    6: 'Date',
    7: 'YouTube Link',
    8: 'PDF Link'
  };
  const renderExtraFields = () => {
    switch (parseInt(formValues.type, 10)) {
      case 2:
      case 3:
      case 5:
      default:
        return (<FieldArray name='options' component={FieldOptions} />);
    }
  };

  return (
    <Dialog
      onExited={modalExit}
      open={isOpen}
      classes={{ paper: `${classes.dialogPaper}` }}>
      <DialogTitle className={classes.dialogTitle}>
        <Typography variant='h6'>Editing Field</Typography>
        <Typography variant='caption' color='secondary'>{`"${editingField.label}"`}</Typography>
        <div>
          <Typography className={classes.inline} color='textSecondary' variant='overline'>
            {'Tab #2 -'}
          </Typography>
          <Typography className={classes.inline} variant='caption' color='textPrimary'>
            {'- Fuck Stick'}
          </Typography>
        </div>
      </DialogTitle>
      <DialogContent className={classes.dialogContent}>
        <form className={classes.form}>
          <FormRow>
            <FormField
              large={4}
              medium={6}
              small={6}
              label='Field Type'
              name='type'
              type='select'
              options={fieldOptions}
            />
            <FormField
              large={4}
              medium={6}
              small={6}
              label='Tab Name'
              name='tabName'
              type='text'
            />
            <FormField
              large={4}
              medium={6}
              small={6}
              label='Field Label'
              name='label'
              type='text'
            />
          </FormRow>
          {formValues && renderExtraFields()}
        </form>
      </DialogContent>
      <Divider className={classes.divider} />
      <DialogActions>
        <Column className={classes.center}>
          <Button
            label='Close'
            size='small'
            style={{ width: '100px', marginRight: '15px' }}
            className='update-fields-submit'
            variant='text'
            onClick={() => hideModal()}
            color='secondary'
          />
          <Button
            primary
            type='submit'
            onClick={() => update()}
            label={editingField ? 'Update' : 'Add'}
            labelStyle={{ paddingRight: '5px' }}
            style={{ width: '100px', marginRight: '15px' }}
            icon={editingField ? <SaveIcon /> : <AddIcon />}
            iconAlign='left'
            size='small'
            className='update-fields-submit'
            disabled={disabled}
          />
        </Column>
      </DialogActions>
    </Dialog>
  );
};

EditModal.defaultProps = {
  formValues: null,
  editingField: null,
};

EditModal.propTypes = {
  formValues   : PropTypes.instanceOf(Object),
  editingField : PropTypes.shape({
    type:    PropTypes.string.isRequired,
    tabName: PropTypes.string.isRequired,
    id:      PropTypes.string.isRequired,
    label:   PropTypes.string
  }),
  isOpen       : PropTypes.bool.isRequired,
  classes      : PropTypes.instanceOf(Object).isRequired,
  update       : PropTypes.func.isRequired,
  add          : PropTypes.func.isRequired,
  cancel       : PropTypes.func.isRequired,
  hideModal    : PropTypes.func.isRequired,
  modalExit    : PropTypes.func.isRequired
};

const mapActionCreators = {
  update      : updateField,
  add         : addField,
  cancel      : cancelFieldEdit,
  hideModal   : uiHideModal,
  modalExit   : uiModalExit
};

const mapStateToProps = (state) => ({
  formValues:   _.get(state, 'form.fields.values'),
  isOpen:       _.get(state, 'ui.modal.name') === EDIT_FIELD_MODAL && _.get(state, 'ui.modal.isOpen'),
  fieldOptions: _.get(state, 'ui.modal.fieldOptions'),
  editingField  : _.get(state, 'FieldsView.editingField'),
});

const EditForm = withStyles(styles)(reduxForm({
  form: 'fields',
  enableReinitialize: true
  // validate
})(EditModal));
export default connect(mapStateToProps, mapActionCreators)(withStyles(styles)(EditForm));
